import { RequestManager } from './RequestManager';
import { FilterOptions, FilterChange, TxHash, SHHFilterOptions, Data, SHHFilterMessage } from './Schema';
import { IFuture } from './utils/future';
export declare type FilterCallback = (messages: FilterChange[] | string[]) => void;
export declare abstract class AbstractFilter<T> {
    requestManager: RequestManager;
    isStarted: boolean;
    isDisposed: boolean;
    formatter: (x) => T;
    protected filterId: IFuture<Data>;
    protected callbacks: ((message: T) => void)[];
    protected stopSemaphore: IFuture<any>;
    constructor(requestManager: RequestManager);
    watch(callback: (message: T) => void): Promise<void>;
    start(): Promise<void>;
    stop(): Promise<void>;
    protected abstract getNewFilter(): Promise<Data>;
    protected abstract getChanges(): Promise<any>;
    protected abstract uninstall(): Promise<any>;
    /**
     * Adds the callback and sets up the methods, to iterate over the results.
     *
     * @method pollFilter
     */
    private poll();
}
export declare class SHHFilter extends AbstractFilter<SHHFilterMessage> {
    requestManager: RequestManager;
    options: SHHFilterOptions;
    constructor(requestManager: RequestManager, options: SHHFilterOptions);
    getMessages(): Promise<any>;
    protected getNewFilter(): Promise<string>;
    protected getChanges(): Promise<any>;
    protected uninstall(): Promise<any>;
}
export declare class EthFilter<T = FilterChange | string> extends AbstractFilter<T> {
    requestManager: RequestManager;
    options: FilterOptions;
    formatter: (message: FilterChange | string) => T;
    constructor(requestManager: RequestManager, options: FilterOptions, formatter?: (message: FilterChange | string) => T);
    getLogs(): Promise<string[] | FilterChange[]>;
    protected getNewFilter(): Promise<any>;
    protected getChanges(): Promise<any>;
    protected uninstall(): Promise<any>;
}
export declare class EthPendingTransactionFilter extends EthFilter<TxHash> {
    constructor(requestManager: RequestManager);
    getNewFilter(): Promise<string>;
}
export declare class EthBlockFilter extends EthFilter<TxHash> {
    constructor(requestManager: RequestManager);
    getNewFilter(): Promise<string>;
}
