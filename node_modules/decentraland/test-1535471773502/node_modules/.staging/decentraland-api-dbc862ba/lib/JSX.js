"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"JSX.js","sourceRoot":"","sources":["../src/JSX.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  ISimplifiedNode,\n  Vector3Component,\n  TransitionComponent,\n  SkeletalAnimationComponent,\n  IBillboardModes,\n  SoundComponent,\n  ITransparencyModes\n} from './interfaces'\nimport { IEvents } from './events'\n\ndeclare global {\n  export namespace JSX {\n    export type Element = ISimplifiedNode\n\n    export type ColorComponent = string\n\n    export type BaseEntity = {\n      /**\n       * The ID is used to attach events and identify the entity in the scene tree\n       */\n      id?: string\n\n      /**\n       * The function that handles the click interaction event\n       */\n      onClick?: (e: IEvents['click']) => void\n\n      /**\n       * Moves the entity center to that point\n       */\n      position?: Vector3Component\n\n      /**\n       * Scales the entity in three dimensions\n       */\n      scale?: Vector3Component | number\n\n      /**\n       * Rotates the entity\n       * The `x,y,z` components are degrees (0°-360°), and every component represents the rotation in that axis\n       */\n      rotation?: Vector3Component\n\n      /**\n       * Rotate the entity to look at a direction\n       */\n      lookAt?: Vector3Component\n\n      /**\n       * Used to differentiate similar entities in lists\n       */\n      key?: string | number\n\n      /**\n       * Defines if the entity and its children should be rendered\n       */\n      visible?: boolean\n\n      /**\n       * Used to animate the transitions in the same fashion as CSS\n       */\n      transition?: TransitionComponent\n\n      /**\n       * Billboard defines a behavior that makes the entity face the camera in any moment.\n       * There are three combinable types of camera facing options defined in the object BillboardModes.\n       *   BILLBOARDMODE_NONE: 0\n       *   BILLBOARDMODE_X: 1\n       *   BILLBOARDMODE_Y: 2\n       *   BILLBOARDMODE_Z: 4\n       *   BILLBOARDMODE_ALL: 7\n       *\n       * To combine billboard types write those in the form:\n       *   BillboardModes.BILLBOARDMODE_X | BillboardModes.BILLBOARDMODE_Y\n       */\n      billboard?: IBillboardModes\n\n      /**\n       * Adds spatial sound to the entities\n       */\n      sound?: SoundComponent\n    }\n\n    export type MaterialDescriptorEntity = {\n      /**\n       * Id of the material, it will be used to pick this material from other entities\n       */\n      id: string\n\n      /**\n       * Opacity.\n       */\n      alpha?: number\n\n      /**\n       * The color of a material in ambient lighting.\n       */\n      ambientColor?: ColorComponent\n\n      /**\n       * AKA Diffuse Color in other nomenclature.\n       */\n      albedoColor?: ColorComponent\n\n      /**\n       * AKA Specular Color in other nomenclature.\n       */\n      reflectivityColor?: ColorComponent\n\n      /**\n       * The color reflected from the material.\n       */\n      reflectionColor?: ColorComponent\n\n      /**\n       * The color emitted from the material.\n       */\n      emissiveColor?: ColorComponent\n\n      /**\n       * Specifies the metallic scalar of the metallic/roughness workflow.\n       * Can also be used to scale the metalness values of the metallic texture.\n       */\n      metallic?: number\n\n      /**\n       * Specifies the roughness scalar of the metallic/roughness workflow.\n       * Can also be used to scale the roughness values of the metallic texture.\n       */\n      roughness?: number\n\n      /**\n       * Texture applied as material.\n       */\n      albedoTexture?: string\n\n      /**\n       * Texture applied as opacity. Default: the same texture used in albedoTexture.\n       */\n      alphaTexture?: string\n\n      /**\n       * Emmisive texture.\n       */\n      emisiveTexture?: string\n\n      /**\n       * Stores surface normal data used to displace a mesh in a texture.\n       */\n      bumpTexture?: string\n\n      /**\n       * Stores the refracted light information in a texture.\n       */\n      refractionTexture?: string\n\n      /**\n       * Intensity of the direct lights e.g. the four lights available in scene.\n       * This impacts both the direct diffuse and specular highlights.\n       */\n      directIntensity?: number\n\n      /**\n       * Intensity of the emissive part of the material.\n       * This helps controlling the emissive effect without modifying the emissive color.\n       */\n      emissiveIntensity?: number\n\n      /**\n       * Intensity of the environment e.g. how much the environment will light the object\n       * either through harmonics for rough material or through the refelction for shiny ones.\n       */\n      environmentIntensity?: number\n\n      /**\n       * This is a special control allowing the reduction of the specular highlights coming from the\n       * four lights of the scene. Those highlights may not be needed in full environment lighting.\n       */\n      specularIntensity?: number\n\n      /**\n       * AKA Glossiness in other nomenclature.\n       */\n      microSurface?: number\n\n      /**\n       * If sets to true, disables all the lights affecting the material.\n       */\n      disableLighting?: boolean\n\n      /**\n       * Sets the transparency mode of the material.\n       *\n       * | Value | Type                                |\n       * | ----- | ----------------------------------- |\n       * | 0     | OPAQUE  (default)                   |\n       * | 1     | ALPHATEST                           |\n       * | 2     | ALPHABLEND                          |\n       * | 3     | ALPHATESTANDBLEND                   |\n       */\n      transparencyMode?: ITransparencyModes\n\n      /**\n       * Does the albedo texture has alpha?\n       */\n      hasAlpha?: boolean\n    }\n\n    export type MaterialEntity = BaseEntity & {\n      /**\n       * Color of the vertices\n       */\n      color?: string | number\n\n      /**\n       * Material selector\n       */\n      material?: string\n\n      /**\n       * Set to true to turn on the collider for the entity.\n       */\n      withCollisions?: boolean\n    }\n\n    export type PlaneEntity = MaterialEntity & {\n      /**\n       * Array of floats containing a set of uv coordinates per vertex per face\n       * First 8 values will be the UVs for the front face, the next 8 will affect the back face.\n       */\n      uvs?: number[]\n    }\n\n    export type BasicMaterialEntity = {\n      /**\n       * Id of the material, it will be used to pick this material from other entities\n       */\n      id: string\n      /**\n       * The source of the texture image\n       */\n      texture: string\n\n      /**\n       * Enabled crisper images based on the provided sampling mode\n       * | Value | Type      |\n       * |-------|-----------|\n       * |     1 | NEAREST   |\n       * |     2 | BILINEAR  |\n       * |     3 | TRILINEAR |\n       */\n      samplingMode?: number\n\n      /**\n       * A number between 0 and 1.\n       * Any pixel with an alpha lower than this value will be shown as transparent.\n       */\n      alphaTest?: number\n    }\n\n    export type SystemEntity = BaseEntity & {\n      /**\n       * The source URL of the system\n       */\n      src: string\n    }\n\n    export type CircleEntity = MaterialEntity & {\n      /**\n       * Radial segments of the geometry. 4 will render a tetrahedron.\n       */\n      segments?: number\n\n      /**\n       * How much of the arc should be rendered, 360 by default (degrees)\n       */\n      arc?: number\n    }\n\n    export type GltfEntity = BaseEntity & {\n      /**\n       * The source URL of the .gltf or .glb model, required\n       */\n      src: string\n\n      /**\n       * List of weighted skeletal animations\n       */\n      skeletalAnimation?: SkeletalAnimationComponent\n    }\n\n    export type ObjEntity = BaseEntity & {\n      /**\n       * The source URL of the .obj required\n       */\n      src: string\n    }\n\n    export type InputTextEntity = BaseEntity & {\n      /**\n       * The text color in hexadecimal format (`#ff0000`)\n       */\n      color?: string\n\n      /**\n       * The name of the font to be used\n       */\n      fontFamily?: string\n\n      /**\n       * The text size\n       */\n      fontSize?: number\n\n      /**\n       * The content of the input\n       */\n      value?: string\n\n      /**\n       * The width of the input box\n       */\n      width?: number\n\n      /**\n       * The height of the input box\n       */\n      height?: number\n\n      /**\n       * The background color in hexadecimal format (`#ff0000`)\n       */\n      background?: string\n\n      /**\n       * The focused ackground color in hexadecimal format (`#ff0000`)\n       */\n      focusedBackground?: string\n\n      /**\n       * The width of the input box's outline\n       */\n      outlineWidth?: number\n\n      /**\n       * The maximun amount of characters for the input\n       */\n      maxLength?: number\n\n      /**\n       * Placeholder text to be shown when the input is empty and blurred.\n       */\n      placeholder?: string\n    }\n\n    export type TextEntity = BaseEntity & {\n      /**\n       * The width of the texts outline\n       */\n      outlineWidth?: number\n\n      /**\n       * The outline color in hexadecimal format (`#ff0000`)\n       */\n      outlineColor?: string\n\n      /**\n       * The text color in hexadecimal format (`#ff0000`)\n       */\n      color?: string\n\n      /**\n       * The name of the font to be used\n       */\n      fontFamily?: string\n\n      /**\n       * The text size\n       */\n      fontSize?: number\n\n      /**\n       * The weight of the text\n       */\n      fontWeight?: string\n\n      /**\n       * The text size\n       */\n      opacity?: number\n\n      /**\n       * The content of the text\n       */\n      value: string\n\n      /**\n       * The size of the space between lines\n       */\n      lineSpacing?: string\n\n      /**\n       * If set to true the text will wrap to the next line when the maximun width is reached\n       */\n      textWrapping?: boolean\n\n      /**\n       * Horizontal alignment (`top`, `right`, `bottom` or `left`)\n       */\n      hAlign?: string\n\n      /**\n       * Vertical alignment (`top`, `right`, `bottom` or `left`)\n       */\n      vAlign?: string\n\n      /**\n       * The text width\n       */\n      width?: number\n\n      /**\n       * The text height\n       */\n      height?: number\n\n      lineCount?: number\n      resizeToFit?: boolean\n      shadowBlur?: number\n      shadowOffsetX?: number\n      shadowOffsetY?: number\n      shadowColor?: string\n      zIndex?: number\n      paddingTop?: number\n      paddingRight?: number\n      paddingBottom?: number\n      paddingLeft?: number\n    }\n\n    export type VideoEntity = BaseEntity & {\n      /**\n       * The source URL of the video (required)\n       */\n      src: string\n\n      /**\n       * The height of the video\n       */\n      height?: number\n\n      /**\n       * The width of the video\n       */\n      width?: number\n\n      /**\n       * If set to `true` the video will begin playing. Browser restrictions on autoplay apply.\n       */\n      play?: boolean\n\n      /**\n       * If set to `true` the video will restart after ending\n       */\n      loop?: boolean\n\n      /**\n       * The volume of the video as a number between 0 and 100\n       */\n      volume?: number\n    }\n\n    export type CylinderEntity = MaterialEntity & {\n      // tslint:disable-next-line:no-commented-out-code\n      /**\n       * Radius (meters)\n       */\n      radius?: number\n\n      /**\n       * How much of the arc should be rendered, 360 by default (degrees)\n       */\n      arc?: number\n\n      /**\n       * Radius of the top face (meters)\n       */\n      radiusTop?: number\n      /**\n       * Radius of the bottom face (meters)\n       */\n      radiusBottom?: number\n\n      /**\n       * Radial segments of the geometry. 4 will render a tetrahedron.\n       */\n      segmentsRadial?: number\n\n      /**\n       * Vertical segments of the geometry\n       */\n      segmentsHeight?: number\n\n      /**\n       * Render caps\n       */\n      openEnded?: boolean\n    }\n\n    export interface IntrinsicElements {\n      // @internal\n      ['x-stub']: {\n        boolean?: boolean\n        object?: Vector3Component\n        array?: [number, number, number]\n        string?: string\n        key?: string\n      }\n\n      material: MaterialDescriptorEntity\n      ['basic-material']: BasicMaterialEntity\n\n      scene: BaseEntity\n      entity: BaseEntity\n      box: MaterialEntity\n      circle: CircleEntity\n      plane: PlaneEntity\n      sphere: MaterialEntity\n      cylinder: CylinderEntity\n      cone: CylinderEntity\n      text: TextEntity\n      video: VideoEntity\n\n      ['gltf-model']: GltfEntity\n      ['obj-model']: ObjEntity\n\n      ['input-text']: InputTextEntity\n    }\n  }\n}\n"]}