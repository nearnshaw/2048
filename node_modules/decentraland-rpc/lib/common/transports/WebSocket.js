export function WebSocketTransport(socket) {
    const queue = [];
    socket.addEventListener('open', function () {
        flush();
    });
    function flush() {
        if (socket.readyState === socket.OPEN) {
            queue.forEach($ => send($));
            queue.length = 0;
        }
    }
    function send(msg) {
        if (typeof msg === 'string') {
            socket.send(msg, { binary: false });
        }
        else if (msg instanceof Uint8Array || msg instanceof ArrayBuffer || msg instanceof SharedArrayBuffer) {
            ;
            socket.binaryType = 'arraybuffer';
            socket.send(msg, { binary: true });
        }
    }
    const api = {
        onConnect(handler) {
            if (socket.readyState === socket.OPEN) {
                handler();
            }
            else {
                socket.addEventListener('open', () => handler(), { once: true });
            }
        },
        onError(handler) {
            socket.addEventListener('error', (err) => {
                if (err.error) {
                    handler(err.error);
                }
                else if (err.message) {
                    handler(Object.assign(new Error(err.message), {
                        colno: err.colno,
                        error: err.error,
                        filename: err.filename,
                        lineno: err.lineno,
                        message: err.message
                    }));
                }
            });
        },
        onMessage(handler) {
            socket.addEventListener('message', (message) => {
                handler(message.data);
            });
        },
        sendMessage(message) {
            const toSend = message instanceof Uint8Array ? message.buffer : message;
            if (socket.readyState === socket.OPEN) {
                send(toSend);
            }
            else {
                queue.push(toSend);
            }
        },
        close() {
            socket.close();
        }
    };
    return api;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2ViU29ja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi90cmFuc3BvcnRzL1dlYlNvY2tldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFtQ0EsTUFBTSxVQUFVLGtCQUFrQixDQUFDLE1BQWtCO0lBQ25ELE1BQU0sS0FBSyxHQUF1RSxFQUFFLENBQUE7SUFFcEYsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRTtRQUM5QixLQUFLLEVBQUUsQ0FBQTtJQUNULENBQUMsQ0FBQyxDQUFBO0lBRUYsU0FBUyxLQUFLO1FBQ1osSUFBSSxNQUFNLENBQUMsVUFBVSxLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUU7WUFDckMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQzNCLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFBO1NBQ2pCO0lBQ0gsQ0FBQztJQUVELFNBQVMsSUFBSSxDQUFDLEdBQW1FO1FBQy9FLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1lBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUE7U0FDcEM7YUFBTSxJQUFJLEdBQUcsWUFBWSxVQUFVLElBQUksR0FBRyxZQUFZLFdBQVcsSUFBSSxHQUFHLFlBQVksaUJBQWlCLEVBQUU7WUFFdEcsQ0FBQztZQUFDLE1BQWMsQ0FBQyxVQUFVLEdBQUcsYUFBYSxDQUFBO1lBQzNDLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7U0FDbkM7SUFDSCxDQUFDO0lBRUQsTUFBTSxHQUFHLEdBQXVCO1FBQzlCLFNBQVMsQ0FBQyxPQUFPO1lBQ2YsSUFBSSxNQUFNLENBQUMsVUFBVSxLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUU7Z0JBQ3JDLE9BQU8sRUFBRSxDQUFBO2FBQ1Y7aUJBQU07Z0JBQ0wsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFBO2FBQ2pFO1FBQ0gsQ0FBQztRQUNELE9BQU8sQ0FBQyxPQUFPO1lBQ2IsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRSxDQUFDLEdBQWUsRUFBRSxFQUFFO2dCQUNuRCxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUU7b0JBQ2IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQTtpQkFDbkI7cUJBQU0sSUFBSSxHQUFHLENBQUMsT0FBTyxFQUFFO29CQUN0QixPQUFPLENBQ0wsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7d0JBQ3BDLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSzt3QkFDaEIsS0FBSyxFQUFFLEdBQUcsQ0FBQyxLQUFLO3dCQUNoQixRQUFRLEVBQUUsR0FBRyxDQUFDLFFBQVE7d0JBQ3RCLE1BQU0sRUFBRSxHQUFHLENBQUMsTUFBTTt3QkFDbEIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxPQUFPO3FCQUNyQixDQUFDLENBQ0gsQ0FBQTtpQkFDRjtZQUNILENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQztRQUNELFNBQVMsQ0FBQyxPQUFPO1lBQ2YsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxDQUFDLE9BQXNCLEVBQUUsRUFBRTtnQkFDNUQsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUN2QixDQUFDLENBQUMsQ0FBQTtRQUNKLENBQUM7UUFDRCxXQUFXLENBQUMsT0FBTztZQUNqQixNQUFNLE1BQU0sR0FBRyxPQUFPLFlBQVksVUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUE7WUFFdkUsSUFBSSxNQUFNLENBQUMsVUFBVSxLQUFLLE1BQU0sQ0FBQyxJQUFJLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTthQUNiO2lCQUFNO2dCQUNMLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7YUFDbkI7UUFDSCxDQUFDO1FBQ0QsS0FBSztZQUNILE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQTtRQUNoQixDQUFDO0tBQ0YsQ0FBQTtJQUVELE9BQU8sR0FBRyxDQUFBO0FBQ1osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNjcmlwdGluZ1RyYW5zcG9ydCB9IGZyb20gJy4uL2pzb24tcnBjL3R5cGVzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIElXZWJTb2NrZXRFdmVudE1hcCB7XG4gIGNsb3NlOiBhbnlcbiAgZXJyb3I6IGFueVxuICBtZXNzYWdlOiB7IGRhdGE6IGFueSB9XG4gIG9wZW46IGFueVxufVxuXG4vKipcbiAqIFRoaXMgaW50ZXJmYWNlIHNob3VsZCBiZSBjb21wYXRpYmxlIHdpdGggdGhlIEJyb3dzZXJzIGludGVyZmFjZVxuICogYW5kIG5wbSB3cyBwYWNrYWdlIGZvciBzZXJ2ZXJzXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVdlYlNvY2tldCB7XG4gIENPTk5FQ1RJTkc6IG51bWJlclxuICBPUEVOOiBudW1iZXJcbiAgQ0xPU0lORzogbnVtYmVyXG4gIENMT1NFRDogbnVtYmVyXG5cbiAgcmVhZHlTdGF0ZTogbnVtYmVyXG5cbiAgY2xvc2UoY29kZT86IG51bWJlciwgZGF0YT86IHN0cmluZyk6IHZvaWRcblxuICBzZW5kKGRhdGE6IGFueSwgY2I/OiAoZXJyOiBFcnJvcikgPT4gdm9pZCk6IHZvaWRcbiAgc2VuZChkYXRhOiBhbnksIG9wdGlvbnM6IGFueSwgY2I/OiAoZXJyOiBFcnJvcikgPT4gdm9pZCk6IHZvaWRcblxuICB0ZXJtaW5hdGU/KCk6IHZvaWRcblxuICBhZGRFdmVudExpc3RlbmVyPEsgZXh0ZW5kcyBrZXlvZiBJV2ViU29ja2V0RXZlbnRNYXA+KFxuICAgIHR5cGU6IEssXG4gICAgbGlzdGVuZXI6IChldjogSVdlYlNvY2tldEV2ZW50TWFwW0tdKSA9PiBhbnksXG4gICAgb3B0aW9ucz86IGFueVxuICApOiB2b2lkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBXZWJTb2NrZXRUcmFuc3BvcnQoc29ja2V0OiBJV2ViU29ja2V0KTogU2NyaXB0aW5nVHJhbnNwb3J0IHtcbiAgY29uc3QgcXVldWU6IChzdHJpbmcgfCBVaW50OEFycmF5IHwgQXJyYXlCdWZmZXIgfCBTaGFyZWRBcnJheUJ1ZmZlciB8IEJ1ZmZlcilbXSA9IFtdXG5cbiAgc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ29wZW4nLCBmdW5jdGlvbigpIHtcbiAgICBmbHVzaCgpXG4gIH0pXG5cbiAgZnVuY3Rpb24gZmx1c2goKSB7XG4gICAgaWYgKHNvY2tldC5yZWFkeVN0YXRlID09PSBzb2NrZXQuT1BFTikge1xuICAgICAgcXVldWUuZm9yRWFjaCgkID0+IHNlbmQoJCkpXG4gICAgICBxdWV1ZS5sZW5ndGggPSAwXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2VuZChtc2c6IHN0cmluZyB8IFVpbnQ4QXJyYXkgfCBBcnJheUJ1ZmZlciB8IFNoYXJlZEFycmF5QnVmZmVyIHwgQnVmZmVyKSB7XG4gICAgaWYgKHR5cGVvZiBtc2cgPT09ICdzdHJpbmcnKSB7XG4gICAgICBzb2NrZXQuc2VuZChtc2csIHsgYmluYXJ5OiBmYWxzZSB9KVxuICAgIH0gZWxzZSBpZiAobXNnIGluc3RhbmNlb2YgVWludDhBcnJheSB8fCBtc2cgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBtc2cgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcikge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnNlbWljb2xvblxuICAgICAgOyhzb2NrZXQgYXMgYW55KS5iaW5hcnlUeXBlID0gJ2FycmF5YnVmZmVyJ1xuICAgICAgc29ja2V0LnNlbmQobXNnLCB7IGJpbmFyeTogdHJ1ZSB9KVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGFwaTogU2NyaXB0aW5nVHJhbnNwb3J0ID0ge1xuICAgIG9uQ29ubmVjdChoYW5kbGVyKSB7XG4gICAgICBpZiAoc29ja2V0LnJlYWR5U3RhdGUgPT09IHNvY2tldC5PUEVOKSB7XG4gICAgICAgIGhhbmRsZXIoKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ29wZW4nLCAoKSA9PiBoYW5kbGVyKCksIHsgb25jZTogdHJ1ZSB9KVxuICAgICAgfVxuICAgIH0sXG4gICAgb25FcnJvcihoYW5kbGVyKSB7XG4gICAgICBzb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCAoZXJyOiBFcnJvckV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChlcnIuZXJyb3IpIHtcbiAgICAgICAgICBoYW5kbGVyKGVyci5lcnJvcilcbiAgICAgICAgfSBlbHNlIGlmIChlcnIubWVzc2FnZSkge1xuICAgICAgICAgIGhhbmRsZXIoXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKG5ldyBFcnJvcihlcnIubWVzc2FnZSksIHtcbiAgICAgICAgICAgICAgY29sbm86IGVyci5jb2xubyxcbiAgICAgICAgICAgICAgZXJyb3I6IGVyci5lcnJvcixcbiAgICAgICAgICAgICAgZmlsZW5hbWU6IGVyci5maWxlbmFtZSxcbiAgICAgICAgICAgICAgbGluZW5vOiBlcnIubGluZW5vLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfSxcbiAgICBvbk1lc3NhZ2UoaGFuZGxlcikge1xuICAgICAgc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCAobWVzc2FnZTogeyBkYXRhOiBhbnkgfSkgPT4ge1xuICAgICAgICBoYW5kbGVyKG1lc3NhZ2UuZGF0YSlcbiAgICAgIH0pXG4gICAgfSxcbiAgICBzZW5kTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICBjb25zdCB0b1NlbmQgPSBtZXNzYWdlIGluc3RhbmNlb2YgVWludDhBcnJheSA/IG1lc3NhZ2UuYnVmZmVyIDogbWVzc2FnZVxuXG4gICAgICBpZiAoc29ja2V0LnJlYWR5U3RhdGUgPT09IHNvY2tldC5PUEVOKSB7XG4gICAgICAgIHNlbmQodG9TZW5kKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWUucHVzaCh0b1NlbmQpXG4gICAgICB9XG4gICAgfSxcbiAgICBjbG9zZSgpIHtcbiAgICAgIHNvY2tldC5jbG9zZSgpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFwaVxufVxuIl19