"use strict";
/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
// tslint:disable:variable-name
Object.defineProperty(exports, "__esModule", { value: true });
const formatters = require("../utils/formatters");
const utils = require("../utils/utils");
const Method_1 = require("../Method");
const Property_1 = require("../Property");
var eth;
(function (eth) {
    eth.eth_getBalance = new Method_1.Method({
        callName: 'eth_getBalance',
        params: 2,
        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],
        outputFormatter: formatters.outputBigNumberFormatter
    });
    eth.eth_getStorageAt = new Method_1.Method({
        callName: 'eth_getStorageAt',
        params: 3,
        inputFormatter: [formatters.inputAddressFormatter, utils.toHex, formatters.inputDefaultBlockNumberFormatter]
    });
    eth.eth_getCode = new Method_1.Method({
        callName: 'eth_getCode',
        params: 2,
        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]
    });
    eth.eth_getBlockByHash = new Method_1.Method({
        callName: 'eth_getBlockByHash',
        params: 2,
        inputFormatter: [
            formatters.inputBlockNumberFormatter,
            function (val) {
                return !!val;
            }
        ],
        outputFormatter: formatters.outputBlockFormatter
    });
    eth.eth_getBlockByNumber = new Method_1.Method({
        callName: 'eth_getBlockByNumber',
        params: 2,
        inputFormatter: [
            formatters.inputBlockNumberFormatter,
            function (val) {
                return !!val;
            }
        ],
        outputFormatter: formatters.outputBlockFormatter
    });
    eth.eth_getUncleByBlockHashAndIndex = new Method_1.Method({
        callName: 'eth_getUncleByBlockHashAndIndex',
        params: 2,
        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],
        outputFormatter: formatters.outputBlockFormatter
    });
    eth.eth_getUncleByBlockNumberAndIndex = new Method_1.Method({
        callName: 'eth_getUncleByBlockNumberAndIndex',
        params: 2,
        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],
        outputFormatter: formatters.outputBlockFormatter
    });
    eth.eth_getCompilers = new Method_1.Method({
        callName: 'eth_getCompilers',
        params: 0,
        inputFormatter: []
    });
    eth.eth_getBlockTransactionCountByHash = new Method_1.Method({
        callName: 'eth_getBlockTransactionCountByHash',
        params: 1,
        inputFormatter: [formatters.inputBlockNumberFormatter],
        outputFormatter: utils.toDecimal
    });
    eth.eth_getBlockTransactionCountByNumber = new Method_1.Method({
        callName: 'eth_getBlockTransactionCountByNumber',
        params: 1,
        inputFormatter: [formatters.inputBlockNumberFormatter],
        outputFormatter: utils.toDecimal
    });
    eth.eth_getUncleCountByBlockHash = new Method_1.Method({
        callName: 'eth_getUncleCountByBlockHash',
        params: 1,
        inputFormatter: [formatters.inputBlockNumberFormatter],
        outputFormatter: utils.toDecimal
    });
    eth.eth_getUncleCountByBlockNumber = new Method_1.Method({
        callName: 'eth_getUncleCountByBlockNumber',
        params: 1,
        inputFormatter: [formatters.inputBlockNumberFormatter],
        outputFormatter: utils.toDecimal
    });
    eth.eth_getTransactionByHash = new Method_1.Method({
        callName: 'eth_getTransactionByHash',
        params: 1,
        outputFormatter: formatters.outputTransactionFormatter
    });
    eth.eth_getTransactionByBlockHashAndIndex = new Method_1.Method({
        callName: 'eth_getTransactionByBlockHashAndIndex',
        params: 2,
        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],
        outputFormatter: formatters.outputTransactionFormatter
    });
    eth.eth_getTransactionByBlockNumberAndIndex = new Method_1.Method({
        callName: 'eth_getTransactionByBlockNumberAndIndex',
        params: 2,
        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],
        outputFormatter: formatters.outputTransactionFormatter
    });
    eth.eth_getTransactionReceipt = new Method_1.Method({
        callName: 'eth_getTransactionReceipt',
        params: 1,
        outputFormatter: formatters.outputTransactionReceiptFormatter
    });
    eth.eth_getTransactionCount = new Method_1.Method({
        callName: 'eth_getTransactionCount',
        params: 2,
        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],
        outputFormatter: utils.toDecimal
    });
    eth.eth_sendRawTransaction = new Method_1.Method({
        callName: 'eth_sendRawTransaction',
        params: 1,
        inputFormatter: [null]
    });
    eth.web3_sha3 = new Method_1.Method({
        callName: 'web3_sha3',
        params: 1,
        inputFormatter: [null]
    });
    eth.eth_sendTransaction = new Method_1.Method({
        callName: 'eth_sendTransaction',
        params: 1,
        inputFormatter: [formatters.inputTransactionFormatter]
    });
    eth.eth_signTransaction = new Method_1.Method({
        callName: 'eth_signTransaction',
        params: 1,
        inputFormatter: [formatters.inputTransactionFormatter]
    });
    eth.eth_sign = new Method_1.Method({
        callName: 'eth_sign',
        params: 2,
        inputFormatter: [formatters.inputAddressFormatter, null]
    });
    eth.eth_call = new Method_1.Method({
        callName: 'eth_call',
        params: 2,
        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]
    });
    eth.eth_estimateGas = new Method_1.Method({
        callName: 'eth_estimateGas',
        params: 1,
        inputFormatter: [formatters.inputCallFormatter],
        outputFormatter: utils.toDecimal
    });
    eth.eth_compileSolidity = new Method_1.Method({
        callName: 'eth_compileSolidity',
        params: 1
    });
    eth.eth_compileLLL = new Method_1.Method({
        callName: 'eth_compileLLL',
        params: 1
    });
    eth.eth_compileSerpent = new Method_1.Method({
        callName: 'eth_compileSerpent',
        params: 1
    });
    eth.eth_submitWork = new Method_1.Method({
        callName: 'eth_submitWork',
        params: 3,
        outputFormatter: utils.toBoolean
    });
    eth.eth_getWork = new Method_1.Method({
        callName: 'eth_getWork',
        params: 0
    });
    eth.eth_coinbase = new Property_1.Property({
        getter: 'eth_coinbase'
    });
    eth.eth_mining = new Property_1.Property({
        getter: 'eth_mining',
        outputFormatter: utils.toBoolean
    });
    eth.eth_hashrate = new Property_1.Property({
        getter: 'eth_hashrate',
        outputFormatter: utils.toDecimal
    });
    eth.eth_syncing = new Property_1.Property({
        getter: 'eth_syncing',
        outputFormatter: formatters.outputSyncingFormatter
    });
    eth.eth_gasPrice = new Property_1.Property({
        getter: 'eth_gasPrice',
        outputFormatter: formatters.outputBigNumberFormatter
    });
    eth.eth_accounts = new Property_1.Property({
        getter: 'eth_accounts'
    });
    eth.eth_blockNumber = new Property_1.Property({
        getter: 'eth_blockNumber',
        outputFormatter: utils.toDecimal
    });
    eth.eth_protocolVersion = new Property_1.Property({
        getter: 'eth_protocolVersion',
        outputFormatter: utils.toDecimal
    });
    eth.web3_clientVersion = new Property_1.Property({
        getter: 'web3_clientVersion'
    });
    eth.net_version = new Property_1.Property({
        getter: 'net_version',
        outputFormatter: utils.toDecimal
    });
    eth.shh_version = new Method_1.Method({
        callName: 'shh_version',
        params: 0,
        outputFormatter: utils.toDecimal
    });
    eth.shh_info = new Method_1.Method({
        callName: 'shh_info',
        params: 0
    });
    eth.shh_setMaxMessageSize = new Method_1.Method({
        callName: 'shh_setMaxMessageSize',
        params: 1
    });
    eth.shh_setMinPoW = new Method_1.Method({
        callName: 'shh_setMinPoW',
        params: 1
    });
    eth.shh_markTrustedPeer = new Method_1.Method({
        callName: 'shh_markTrustedPeer',
        params: 1
    });
    eth.shh_newKeyPair = new Method_1.Method({
        callName: 'shh_newKeyPair',
        params: 0
    });
    eth.shh_addPrivateKey = new Method_1.Method({
        callName: 'shh_addPrivateKey',
        params: 1
    });
    eth.shh_deleteKeyPair = new Method_1.Method({
        callName: 'shh_deleteKeyPair',
        params: 1
    });
    eth.shh_hasKeyPair = new Method_1.Method({
        callName: 'shh_hasKeyPair',
        params: 1
    });
    eth.shh_getPublicKey = new Method_1.Method({
        callName: 'shh_getPublicKey',
        params: 1
    });
    eth.shh_getPrivateKey = new Method_1.Method({
        callName: 'shh_getPrivateKey',
        params: 1
    });
    eth.shh_newSymKey = new Method_1.Method({
        callName: 'shh_newSymKey',
        params: 0
    });
    eth.shh_addSymKey = new Method_1.Method({
        callName: 'shh_addSymKey',
        params: 1
    });
    eth.shh_generateSymKeyFromPassword = new Method_1.Method({
        callName: 'shh_generateSymKeyFromPassword',
        params: 1
    });
    eth.shh_hasSymKey = new Method_1.Method({
        callName: 'shh_hasSymKey',
        params: 1
    });
    eth.shh_getSymKey = new Method_1.Method({
        callName: 'shh_getSymKey',
        params: 1
    });
    eth.shh_deleteSymKey = new Method_1.Method({
        callName: 'shh_deleteSymKey',
        params: 1
    });
    // subscribe and unsubscribe missing
    eth.shh_post = new Method_1.Method({
        callName: 'shh_post',
        params: 1,
        inputFormatter: [null],
        outputFormatter: utils.toBoolean
    });
    eth.personal_newAccount = new Method_1.Method({
        callName: 'personal_newAccount',
        params: 1,
        inputFormatter: [null]
    });
    eth.personal_importRawKey = new Method_1.Method({
        callName: 'personal_importRawKey',
        params: 2
    });
    eth.personal_sign = new Method_1.Method({
        callName: 'personal_sign',
        params: 3,
        inputFormatter: [null, formatters.inputAddressFormatter, null]
    });
    eth.personal_ecRecover = new Method_1.Method({
        callName: 'personal_ecRecover',
        params: 2
    });
    eth.personal_unlockAccount = new Method_1.Method({
        callName: 'personal_unlockAccount',
        params: 3,
        inputFormatter: [formatters.inputAddressFormatter, null, utils.toNullDecimal],
        outputFormatter: utils.toBoolean
    });
    eth.personal_sendTransaction = new Method_1.Method({
        callName: 'personal_sendTransaction',
        params: 2,
        inputFormatter: [formatters.inputTransactionFormatter, null]
    });
    eth.personal_lockAccount = new Method_1.Method({
        callName: 'personal_lockAccount',
        params: 1,
        inputFormatter: [formatters.inputAddressFormatter],
        outputFormatter: utils.toBoolean
    });
    eth.personal_listAccounts = new Property_1.Property({
        getter: 'personal_listAccounts'
    });
    eth.net_listening = new Property_1.Property({
        getter: 'net_listening',
        outputFormatter: utils.toBoolean
    });
    eth.net_peerCount = new Property_1.Property({
        getter: 'net_peerCount',
        outputFormatter: utils.toDecimal
    });
    eth.eth_newFilter = new Method_1.Method({
        callName: 'eth_newFilter',
        params: 1,
        outputFormatter: utils.toHex
    });
    eth.eth_getLogs = new Method_1.Method({
        callName: 'eth_getLogs',
        params: 1,
        inputFormatter: [utils.toHex]
    });
    eth.eth_newBlockFilter = new Method_1.Method({
        callName: 'eth_newBlockFilter',
        params: 0,
        outputFormatter: utils.toHex
    });
    eth.eth_newPendingTransactionFilter = new Method_1.Method({
        callName: 'eth_newPendingTransactionFilter',
        params: 0,
        outputFormatter: utils.toHex
    });
    eth.eth_uninstallFilter = new Method_1.Method({
        callName: 'eth_uninstallFilter',
        params: 1,
        inputFormatter: [utils.toHex],
        outputFormatter: utils.toBoolean
    });
    eth.eth_getFilterLogs = new Method_1.Method({
        callName: 'eth_getFilterLogs',
        params: 1,
        inputFormatter: [utils.toHex]
    });
    eth.eth_getFilterChanges = new Method_1.Method({
        callName: 'eth_getFilterChanges',
        params: 1,
        inputFormatter: [utils.toHex]
    });
    eth.eth_submitHashrate = new Method_1.Method({
        callName: 'eth_submitHashrate',
        params: 2,
        outputFormatter: utils.toBoolean
    });
    eth.shh_newIdentity = new Method_1.Method({
        callName: 'shh_newIdentity',
        params: 0
    });
    eth.shh_hasIdentity = new Method_1.Method({
        callName: 'shh_hasIdentity',
        params: 1,
        outputFormatter: utils.toBoolean
    });
    eth.shh_newGroup = new Method_1.Method({
        callName: 'shh_newGroup',
        params: 0
    });
    eth.shh_addToGroup = new Method_1.Method({
        callName: 'shh_addToGroup',
        params: 1,
        outputFormatter: utils.toBoolean
    });
    eth.shh_newFilter = new Method_1.Method({
        callName: 'shh_newFilter',
        params: 1,
        outputFormatter: utils.toHex
    });
    eth.shh_uninstallFilter = new Method_1.Method({
        callName: 'shh_uninstallFilter',
        params: 1,
        outputFormatter: utils.toBoolean
    });
    eth.shh_newMessageFilter = new Method_1.Method({
        callName: 'shh_newMessageFilter',
        params: 1
    });
    eth.shh_deleteMessageFilter = new Method_1.Method({
        callName: 'shh_deleteMessageFilter',
        params: 1
    });
    eth.shh_getLogs = new Method_1.Method({
        callName: 'shh_getLogs',
        params: 1
    });
    eth.shh_getFilterMessages = new Method_1.Method({
        callName: 'shh_getFilterMessages',
        params: 1
    });
    eth.shh_getFilterChanges = new Method_1.Method({
        callName: 'shh_getFilterChanges',
        params: 1
    });
    eth.shh_getMessages = new Method_1.Method({
        callName: 'shh_getMessages',
        params: 1
    });
    eth.bzz_blockNetworkRead = new Method_1.Method({
        callName: 'bzz_blockNetworkRead',
        params: 1,
        inputFormatter: [null]
    });
    eth.bzz_syncEnabled = new Method_1.Method({
        callName: 'bzz_syncEnabled',
        params: 1,
        inputFormatter: [null]
    });
    eth.bzz_swapEnabled = new Method_1.Method({
        callName: 'bzz_swapEnabled',
        params: 1,
        inputFormatter: [null]
    });
    eth.bzz_download = new Method_1.Method({
        callName: 'bzz_download',
        params: 2,
        inputFormatter: [null, null]
    });
    eth.bzz_upload = new Method_1.Method({
        callName: 'bzz_upload',
        params: 2,
        inputFormatter: [null, null]
    });
    eth.bzz_retrieve = new Method_1.Method({
        callName: 'bzz_retrieve',
        params: 1,
        inputFormatter: [null]
    });
    eth.bzz_store = new Method_1.Method({
        callName: 'bzz_store',
        params: 2,
        inputFormatter: [null, null]
    });
    eth.bzz_get = new Method_1.Method({
        callName: 'bzz_get',
        params: 1,
        inputFormatter: [null]
    });
    eth.bzz_put = new Method_1.Method({
        callName: 'bzz_put',
        params: 2,
        inputFormatter: [null, null]
    });
    eth.bzz_modify = new Method_1.Method({
        callName: 'bzz_modify',
        params: 4,
        inputFormatter: [null, null, null, null]
    });
    eth.bzz_hive = new Property_1.Property({
        getter: 'bzz_hive'
    });
    eth.bzz_info = new Property_1.Property({
        getter: 'bzz_info'
    });
})(eth = exports.eth || (exports.eth = {}));
//# sourceMappingURL=eth.js.map