"use strict";
/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("./utils/errors");
class Method {
    constructor(options) {
        this.callName = options.callName;
        this.params = options.params || 0;
        this.inputFormatter = options.inputFormatter || null;
        this.outputFormatter = options.outputFormatter || null;
        this.requestManager = null;
    }
    /**
     * Should be called to check if the number of arguments is correct
     *
     * @method validateArgs
     * @param {Array} arguments
     * @throws {Error} if it is not
     */
    validateArgs(args) {
        if (args.length !== this.params) {
            throw errors.InvalidNumberOfRPCParams(this.callName, args.length, this.params);
        }
    }
    /**
     * Should be called to format input args of method
     *
     * @method formatInput
     * @param {Array}
     * @return {Array}
     */
    formatInput(args) {
        if (!this.inputFormatter) {
            return args;
        }
        return this.inputFormatter.map(function (formatter, index) {
            return formatter ? formatter(args[index]) : args[index];
        });
    }
    /**
     * Should be called to format output(result) of method
     *
     * @method formatOutput
     * @param {object}
     * @return {object}
     */
    formatOutput(result) {
        return this.outputFormatter && result ? this.outputFormatter(result) : result;
    }
    /**
     * Should create payload from given input args
     *
     * @method toPayload
     * @param {Array} args
     * @return {object}
     */
    toPayload(args) {
        let params = this.formatInput(args);
        this.validateArgs(params);
        return {
            method: this.callName,
            params: params
        };
    }
    async execute(requestManager, ...args) {
        let payload = this.toPayload(args);
        if (!requestManager)
            throw new Error('Missing RequestManager in method#exec');
        const result = await requestManager.sendAsync(payload);
        return this.formatOutput(result);
    }
}
exports.Method = Method;
//# sourceMappingURL=Method.js.map