import { ISimplifiedNode, ILand } from '.';
import { DiffPacket } from './internal/types';
export interface MessageDict {
    [key: string]: string;
}
export declare type UserData = {
    displayName: string;
    publicKey: string;
};
export interface ParcelIdentity {
    getParcel(): Promise<{
        x: number;
        y: number;
        land: ILand;
    }>;
}
export declare type RPCSendableMessage = {
    jsonrpc: '2.0';
    id: number;
    method: string;
    params: any[];
};
export interface EntityController {
    /**
     * Overwrites the scene by rendering provided Node
     * @param element
     */
    render(element: ISimplifiedNode | DiffPacket): Promise<void>;
    /**
     * Subscribes to events dispatched by the EntityController
     * Use it to listen to events from the scene (like `click`)
     * @param event
     */
    subscribe(event: string): Promise<void>;
    /**
     * Removes a subscription to an event
     * @param event
     */
    unsubscribe(event: string): Promise<void>;
    /**
     * Passes attributes to the components of an specific entity
     *
     * Values must be specified in the same way as in the Estate definition syntax
     *
     * For example:
     *
     * ```
     * {
     *   position: {x: 0, y:0, z:0},
     *   sound: {src: "sounds/carnivalrides.ogg", autoplay: true }
     *   // etc...
     * }
     * ```
     * @param entityId The value specified in the `id` attribute of the entity
     * @param attributes An object containing attributes and their values as strings
     */
    setEntityAttributes(entityId: string, attributes: {
        [key: string]: any;
    }): Promise<void>;
    /**
     * Returns the value for an especific attribute of an entrity
     * @param entityId The value specified in the `id` attribute of the entity
     * @param attribute The name of the attribute, for example: `position`
     */
    getEntityAttribute(entityId: string, attribute: string): Promise<string>;
    /**
     * Returns the attributes for this script
     *
     * Useful when retrieving attributes passed directly to the `script` entity
     */
    getOwnAttributes(): Promise<{
        [key: string]: any;
    }>;
    /** Event handler for subscription events */
    onSubscribedEvent(fn: any): void;
    /**
     * Returns scene limits
     */
    querySceneLimits(): Promise<{
        triangles: number;
        entities: number;
        bodies: number;
        materials: number;
        textures: number;
    }>;
    /**
     * Returns scene metrics
     */
    querySceneMetrics(): Promise<{
        triangles: number;
        entities: number;
        bodies: number;
        materials: number;
        textures: number;
    }>;
}
export interface EthereumController {
    /**
     * Requires a generic payment in ETH or ERC20.
     * @param  {string} [toAddress] - NFT asset id.
     * @param  {number} [amount] - Exact amount of the order.
     * @param  {string} [currency] - ETH or ERC20 supported token symbol
     */
    requirePayment(toAddress: string, amount: number, currency: string): Promise<any>;
    /**
     * Takes a dictionary, converts it to string with correct format and signs it.
     * @param  {messageToSign} [MessageDict] - Message in an object format.
     * @return {object} - Promise of message and signature in an object.
     */
    signMessage(message: MessageDict): Promise<{
        message: string;
        signature: string;
    }>;
    /**
     * Used to build a Ethereum provider
     */
    sendAsync(message: RPCSendableMessage): Promise<any>;
}
export interface CharactersIdentity {
}
export interface SoundController {
    /**
     * Automatically plays a sound.
     * @param src A path to the sound file relative to the scene directory
     * @param options Additional options shuch as `volume`, and `loop`
     */
    playSound(src: string, options?: {
        volume?: number;
        loop?: boolean;
    }): Promise<void>;
}
export interface UserIdentity {
    /**
     * Return the Ethereum address of the user
     */
    getUserPublicKey(): Promise<string | null>;
    /**
     * Return the user's data
     */
    getUserData(): Promise<UserData | null>;
}
