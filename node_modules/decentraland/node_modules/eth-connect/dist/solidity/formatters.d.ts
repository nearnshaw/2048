import { BigNumber } from 'bignumber.js';
import { SolidityParam } from './param';
/**
 * Formats input value to byte representation of int
 * If value is negative, return it's two's complement
 * If the value is floating point, round it down
 *
 * @method formatInputInt
 * @param {string|number|BigNumber} value that needs to be formatted
 * @returns {SolidityParam}
 */
export declare function formatInputInt(value: any): SolidityParam;
/**
 * Formats input bytes
 *
 * @method formatInputBytes
 * @param {string}
 * @returns {SolidityParam}
 */
export declare function formatInputBytes(value: any): SolidityParam;
/**
 * Formats input bytes
 *
 * @method formatDynamicInputBytes
 * @param {string}
 * @returns {SolidityParam}
 */
export declare function formatInputDynamicBytes(value: any): SolidityParam;
/**
 * Formats input value to byte representation of string
 *
 * @method formatInputString
 * @param {string}
 * @returns {SolidityParam}
 */
export declare function formatInputString(value: any): SolidityParam;
/**
 * Formats input value to byte representation of bool
 *
 * @method formatInputBool
 * @param {Boolean}
 * @returns {SolidityParam}
 */
export declare function formatInputBool(value: any): SolidityParam;
/**
 * Formats input value to byte representation of real
 * Values are multiplied by 2^m and encoded as integers
 *
 * @method formatInputReal
 * @param {string|number|BigNumber}
 * @returns {SolidityParam}
 */
export declare function formatInputReal(value: any): SolidityParam;
/**
 * Check if input value is negative
 *
 * @method signedIsNegative
 * @param {string} value is hex format
 * @returns {Boolean} true if it is negative, otherwise false
 */
export declare function signedIsNegative(value: any): boolean;
/**
 * Formats right-aligned output bytes to int
 *
 * @method formatOutputInt
 * @param {SolidityParam} param
 * @returns {BigNumber} right-aligned output bytes formatted to big number
 */
export declare function formatOutputInt(param: any): BigNumber;
/**
 * Formats right-aligned output bytes to uint
 *
 * @method formatOutputUInt
 * @param {SolidityParam}
 * @returns {BigNumeber} right-aligned output bytes formatted to uint
 */
export declare function formatOutputUInt(param: any): BigNumber;
/**
 * Formats right-aligned output bytes to real
 *
 * @method formatOutputReal
 * @param {SolidityParam}
 * @returns {BigNumber} input bytes formatted to real
 */
export declare function formatOutputReal(param: any): BigNumber;
/**
 * Formats right-aligned output bytes to ureal
 *
 * @method formatOutputUReal
 * @param {SolidityParam}
 * @returns {BigNumber} input bytes formatted to ureal
 */
export declare function formatOutputUReal(param: any): BigNumber;
/**
 * Should be used to format output bool
 *
 * @method formatOutputBool
 * @param {SolidityParam}
 * @returns {Boolean} right-aligned input bytes formatted to bool
 */
export declare function formatOutputBool(param: any): boolean;
/**
 * Should be used to format output bytes
 *
 * @method formatOutputBytes
 * @param {SolidityParam} left-aligned hex representation of string
 * @param {string} name type name
 * @returns {string} hex string
 */
export declare function formatOutputBytes(param: any, name: any): string;
/**
 * Should be used to format output bytes
 *
 * @method formatOutputDynamicBytes
 * @param {SolidityParam} left-aligned hex representation of string
 * @returns {string} hex string
 */
export declare function formatOutputDynamicBytes(param: any): string;
/**
 * Should be used to format output string
 *
 * @method formatOutputString
 * @param {SolidityParam} left-aligned hex representation of string
 * @returns {string} ascii string
 */
export declare function formatOutputString(param: any): any;
/**
 * Should be used to format output address
 *
 * @method formatOutputAddress
 * @param {SolidityParam} right-aligned input bytes
 * @returns {string} address
 */
export declare function formatOutputAddress(param: any): string;
