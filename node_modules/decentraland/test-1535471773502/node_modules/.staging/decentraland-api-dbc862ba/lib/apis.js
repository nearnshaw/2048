"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9hcGlzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJU2ltcGxpZmllZE5vZGUsIElMYW5kIH0gZnJvbSAnLidcbmltcG9ydCB7IERpZmZQYWNrZXQgfSBmcm9tICcuL2ludGVybmFsL3R5cGVzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIE1lc3NhZ2VEaWN0IHtcbiAgW2tleTogc3RyaW5nXTogc3RyaW5nXG59XG5cbmV4cG9ydCB0eXBlIFVzZXJEYXRhID0ge1xuICBkaXNwbGF5TmFtZTogc3RyaW5nXG4gIHB1YmxpY0tleTogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFyY2VsSWRlbnRpdHkge1xuICBnZXRQYXJjZWwoKTogUHJvbWlzZTx7IHg6IG51bWJlcjsgeTogbnVtYmVyOyBsYW5kOiBJTGFuZCB9PlxufVxuXG5leHBvcnQgdHlwZSBSUENTZW5kYWJsZU1lc3NhZ2UgPSB7XG4gIGpzb25ycGM6ICcyLjAnXG4gIGlkOiBudW1iZXJcbiAgbWV0aG9kOiBzdHJpbmdcbiAgcGFyYW1zOiBhbnlbXVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEVudGl0eUNvbnRyb2xsZXIge1xuICAvKipcbiAgICogT3ZlcndyaXRlcyB0aGUgc2NlbmUgYnkgcmVuZGVyaW5nIHByb3ZpZGVkIE5vZGVcbiAgICogQHBhcmFtIGVsZW1lbnRcbiAgICovXG4gIHJlbmRlcihlbGVtZW50OiBJU2ltcGxpZmllZE5vZGUgfCBEaWZmUGFja2V0KTogUHJvbWlzZTx2b2lkPlxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmVzIHRvIGV2ZW50cyBkaXNwYXRjaGVkIGJ5IHRoZSBFbnRpdHlDb250cm9sbGVyXG4gICAqIFVzZSBpdCB0byBsaXN0ZW4gdG8gZXZlbnRzIGZyb20gdGhlIHNjZW5lIChsaWtlIGBjbGlja2ApXG4gICAqIEBwYXJhbSBldmVudFxuICAgKi9cbiAgc3Vic2NyaWJlKGV2ZW50OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBzdWJzY3JpcHRpb24gdG8gYW4gZXZlbnRcbiAgICogQHBhcmFtIGV2ZW50XG4gICAqL1xuICB1bnN1YnNjcmliZShldmVudDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPlxuXG4gIC8qKlxuICAgKiBQYXNzZXMgYXR0cmlidXRlcyB0byB0aGUgY29tcG9uZW50cyBvZiBhbiBzcGVjaWZpYyBlbnRpdHlcbiAgICpcbiAgICogVmFsdWVzIG11c3QgYmUgc3BlY2lmaWVkIGluIHRoZSBzYW1lIHdheSBhcyBpbiB0aGUgRXN0YXRlIGRlZmluaXRpb24gc3ludGF4XG4gICAqXG4gICAqIEZvciBleGFtcGxlOlxuICAgKlxuICAgKiBgYGBcbiAgICoge1xuICAgKiAgIHBvc2l0aW9uOiB7eDogMCwgeTowLCB6OjB9LFxuICAgKiAgIHNvdW5kOiB7c3JjOiBcInNvdW5kcy9jYXJuaXZhbHJpZGVzLm9nZ1wiLCBhdXRvcGxheTogdHJ1ZSB9XG4gICAqICAgLy8gZXRjLi4uXG4gICAqIH1cbiAgICogYGBgXG4gICAqIEBwYXJhbSBlbnRpdHlJZCBUaGUgdmFsdWUgc3BlY2lmaWVkIGluIHRoZSBgaWRgIGF0dHJpYnV0ZSBvZiB0aGUgZW50aXR5XG4gICAqIEBwYXJhbSBhdHRyaWJ1dGVzIEFuIG9iamVjdCBjb250YWluaW5nIGF0dHJpYnV0ZXMgYW5kIHRoZWlyIHZhbHVlcyBhcyBzdHJpbmdzXG4gICAqL1xuICBzZXRFbnRpdHlBdHRyaWJ1dGVzKGVudGl0eUlkOiBzdHJpbmcsIGF0dHJpYnV0ZXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0pOiBQcm9taXNlPHZvaWQ+XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHZhbHVlIGZvciBhbiBlc3BlY2lmaWMgYXR0cmlidXRlIG9mIGFuIGVudHJpdHlcbiAgICogQHBhcmFtIGVudGl0eUlkIFRoZSB2YWx1ZSBzcGVjaWZpZWQgaW4gdGhlIGBpZGAgYXR0cmlidXRlIG9mIHRoZSBlbnRpdHlcbiAgICogQHBhcmFtIGF0dHJpYnV0ZSBUaGUgbmFtZSBvZiB0aGUgYXR0cmlidXRlLCBmb3IgZXhhbXBsZTogYHBvc2l0aW9uYFxuICAgKi9cbiAgZ2V0RW50aXR5QXR0cmlidXRlKGVudGl0eUlkOiBzdHJpbmcsIGF0dHJpYnV0ZTogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGF0dHJpYnV0ZXMgZm9yIHRoaXMgc2NyaXB0XG4gICAqXG4gICAqIFVzZWZ1bCB3aGVuIHJldHJpZXZpbmcgYXR0cmlidXRlcyBwYXNzZWQgZGlyZWN0bHkgdG8gdGhlIGBzY3JpcHRgIGVudGl0eVxuICAgKi9cbiAgZ2V0T3duQXR0cmlidXRlcygpOiBQcm9taXNlPHsgW2tleTogc3RyaW5nXTogYW55IH0+XG5cbiAgLyoqIEV2ZW50IGhhbmRsZXIgZm9yIHN1YnNjcmlwdGlvbiBldmVudHMgKi9cbiAgb25TdWJzY3JpYmVkRXZlbnQoZm46IGFueSk6IHZvaWRcblxuICAvKipcbiAgICogUmV0dXJucyBzY2VuZSBsaW1pdHNcbiAgICovXG4gIHF1ZXJ5U2NlbmVMaW1pdHMoKTogUHJvbWlzZTx7XG4gICAgdHJpYW5nbGVzOiBudW1iZXJcbiAgICBlbnRpdGllczogbnVtYmVyXG4gICAgYm9kaWVzOiBudW1iZXJcbiAgICBtYXRlcmlhbHM6IG51bWJlclxuICAgIHRleHR1cmVzOiBudW1iZXJcbiAgfT5cblxuICAvKipcbiAgICogUmV0dXJucyBzY2VuZSBtZXRyaWNzXG4gICAqL1xuICBxdWVyeVNjZW5lTWV0cmljcygpOiBQcm9taXNlPHtcbiAgICB0cmlhbmdsZXM6IG51bWJlclxuICAgIGVudGl0aWVzOiBudW1iZXJcbiAgICBib2RpZXM6IG51bWJlclxuICAgIG1hdGVyaWFsczogbnVtYmVyXG4gICAgdGV4dHVyZXM6IG51bWJlclxuICB9PlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV0aGVyZXVtQ29udHJvbGxlciB7XG4gIC8qKlxuICAgKiBSZXF1aXJlcyBhIGdlbmVyaWMgcGF5bWVudCBpbiBFVEggb3IgRVJDMjAuXG4gICAqIEBwYXJhbSAge3N0cmluZ30gW3RvQWRkcmVzc10gLSBORlQgYXNzZXQgaWQuXG4gICAqIEBwYXJhbSAge251bWJlcn0gW2Ftb3VudF0gLSBFeGFjdCBhbW91bnQgb2YgdGhlIG9yZGVyLlxuICAgKiBAcGFyYW0gIHtzdHJpbmd9IFtjdXJyZW5jeV0gLSBFVEggb3IgRVJDMjAgc3VwcG9ydGVkIHRva2VuIHN5bWJvbFxuICAgKi9cbiAgcmVxdWlyZVBheW1lbnQodG9BZGRyZXNzOiBzdHJpbmcsIGFtb3VudDogbnVtYmVyLCBjdXJyZW5jeTogc3RyaW5nKTogUHJvbWlzZTxhbnk+XG5cbiAgLyoqXG4gICAqIFRha2VzIGEgZGljdGlvbmFyeSwgY29udmVydHMgaXQgdG8gc3RyaW5nIHdpdGggY29ycmVjdCBmb3JtYXQgYW5kIHNpZ25zIGl0LlxuICAgKiBAcGFyYW0gIHttZXNzYWdlVG9TaWdufSBbTWVzc2FnZURpY3RdIC0gTWVzc2FnZSBpbiBhbiBvYmplY3QgZm9ybWF0LlxuICAgKiBAcmV0dXJuIHtvYmplY3R9IC0gUHJvbWlzZSBvZiBtZXNzYWdlIGFuZCBzaWduYXR1cmUgaW4gYW4gb2JqZWN0LlxuICAgKi9cbiAgc2lnbk1lc3NhZ2UobWVzc2FnZTogTWVzc2FnZURpY3QpOiBQcm9taXNlPHsgbWVzc2FnZTogc3RyaW5nOyBzaWduYXR1cmU6IHN0cmluZyB9PlxuXG4gIC8qKlxuICAgKiBUYWtlcyBhIG1lc3NhZ2Ugc3RyaW5nLCBwYXJzZXMgaXQgYW5kIGNvbnZlcnRzIHRvIG9iamVjdC5cbiAgICogQHBhcmFtICB7bWVzc2FnZX0gW3N0cmluZ10gLSBNZXNzYWdlIGluIGEgc3RyaW5nIGZvcm1hdC5cbiAgICogQHJldHVybiB7b2JqZWN0fSAtIFByb21pc2Ugb2YgbWVzc2FnZSBhcyBhIE1lc3NhZ2VEaWN0LlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnZlcnRNZXNzYWdlVG9PYmplY3QobWVzc2FnZTogc3RyaW5nKTogUHJvbWlzZTxNZXNzYWdlRGljdD5cblxuICAvKipcbiAgICogVXNlZCB0byBidWlsZCBhIEV0aGVyZXVtIHByb3ZpZGVyXG4gICAqL1xuICBzZW5kQXN5bmMobWVzc2FnZTogUlBDU2VuZGFibGVNZXNzYWdlKTogUHJvbWlzZTxhbnk+XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhcmFjdGVyc0lkZW50aXR5IHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgU291bmRDb250cm9sbGVyIHtcbiAgLyoqXG4gICAqIEF1dG9tYXRpY2FsbHkgcGxheXMgYSBzb3VuZC5cbiAgICogQHBhcmFtIHNyYyBBIHBhdGggdG8gdGhlIHNvdW5kIGZpbGUgcmVsYXRpdmUgdG8gdGhlIHNjZW5lIGRpcmVjdG9yeVxuICAgKiBAcGFyYW0gb3B0aW9ucyBBZGRpdGlvbmFsIG9wdGlvbnMgc2h1Y2ggYXMgYHZvbHVtZWAsIGFuZCBgbG9vcGBcbiAgICovXG4gIHBsYXlTb3VuZChzcmM6IHN0cmluZywgb3B0aW9ucz86IHsgdm9sdW1lPzogbnVtYmVyOyBsb29wPzogYm9vbGVhbiB9KTogUHJvbWlzZTx2b2lkPlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZXJJZGVudGl0eSB7XG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIEV0aGVyZXVtIGFkZHJlc3Mgb2YgdGhlIHVzZXJcbiAgICovXG4gIGdldFVzZXJQdWJsaWNLZXkoKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPlxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHVzZXIncyBkYXRhXG4gICAqL1xuICBnZXRVc2VyRGF0YSgpOiBQcm9taXNlPFVzZXJEYXRhIHwgbnVsbD5cbn1cbiJdfQ==