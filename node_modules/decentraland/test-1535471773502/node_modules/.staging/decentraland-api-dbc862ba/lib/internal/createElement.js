"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stack = [];
function createElement(nodeName, attributes) {
    let children = [];
    let lastSimple = false;
    let child;
    let simple = false;
    let i;
    let nodeType;
    // tslint:disable-next-line:space-within-parens
    for (i = arguments.length; i-- > 2;) {
        if (arguments[i] && typeof arguments[i] !== 'string')
            stack.push(arguments[i]);
    }
    if (attributes) {
        if (attributes.children != null) {
            if (!stack.length)
                stack.push(attributes.children);
            delete attributes.children;
        }
    }
    while (stack.length) {
        // tslint:disable-next-line:no-conditional-assignment
        if ((child = stack.pop()) && child.pop !== undefined) {
            // tslint:disable-next-line:space-within-parens
            for (i = child.length; i--;)
                stack.push(child[i]);
        }
        else {
            if (typeof child === 'boolean')
                child = null;
            nodeType = typeof nodeName;
            // tslint:disable-next-line:no-conditional-assignment
            if ((simple = nodeType !== 'function')) {
                if (child == null)
                    child = null;
                else if (typeof child !== 'string')
                    simple = false;
            }
            if (simple && lastSimple) {
                children[children.length - 1] += child;
            }
            else if (child) {
                children.push(child);
            }
            lastSimple = simple;
        }
    }
    return {
        tag: nodeName,
        attrs: attributes || {},
        children: children || []
    };
}
exports.createElement = createElement;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlRWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbnRlcm5hbC9jcmVhdGVFbGVtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsTUFBTSxLQUFLLEdBQVUsRUFBRSxDQUFBO0FBMER2QixTQUFnQixhQUFhLENBQUMsUUFBMkIsRUFBRSxVQUFlO0lBQ3hFLElBQUksUUFBUSxHQUFzQixFQUFFLENBQUE7SUFDcEMsSUFBSSxVQUFVLEdBQVksS0FBSyxDQUFBO0lBQy9CLElBQUksS0FBSyxDQUFBO0lBQ1QsSUFBSSxNQUFNLEdBQVksS0FBSyxDQUFBO0lBQzNCLElBQUksQ0FBQyxDQUFBO0lBQ0wsSUFBSSxRQUFnQixDQUFBO0lBRXBCLCtDQUErQztJQUMvQyxLQUFLLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBSTtRQUNwQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxPQUFPLFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRO1lBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtLQUMvRTtJQUNELElBQUksVUFBVSxFQUFFO1FBQ2QsSUFBSSxVQUFVLENBQUMsUUFBUSxJQUFJLElBQUksRUFBRTtZQUMvQixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU07Z0JBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUE7WUFDbEQsT0FBTyxVQUFVLENBQUMsUUFBUSxDQUFBO1NBQzNCO0tBQ0Y7SUFDRCxPQUFPLEtBQUssQ0FBQyxNQUFNLEVBQUU7UUFDbkIscURBQXFEO1FBQ3JELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxTQUFTLEVBQUU7WUFDcEQsK0NBQStDO1lBQy9DLEtBQUssQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFO2dCQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDbkQ7YUFBTTtZQUNMLElBQUksT0FBTyxLQUFLLEtBQUssU0FBUztnQkFBRSxLQUFLLEdBQUcsSUFBSSxDQUFBO1lBRTVDLFFBQVEsR0FBRyxPQUFPLFFBQVEsQ0FBQTtZQUUxQixxREFBcUQ7WUFDckQsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRLEtBQUssVUFBVSxDQUFDLEVBQUU7Z0JBQ3RDLElBQUksS0FBSyxJQUFJLElBQUk7b0JBQUUsS0FBSyxHQUFHLElBQUksQ0FBQTtxQkFDMUIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRO29CQUFFLE1BQU0sR0FBRyxLQUFLLENBQUE7YUFDbkQ7WUFFRCxJQUFJLE1BQU0sSUFBSSxVQUFVLEVBQUU7Z0JBQ3hCLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQTthQUN2QztpQkFBTSxJQUFJLEtBQUssRUFBRTtnQkFDaEIsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQTthQUNyQjtZQUVELFVBQVUsR0FBRyxNQUFNLENBQUE7U0FDcEI7S0FDRjtJQUVELE9BQU87UUFDTCxHQUFHLEVBQUUsUUFBUTtRQUNiLEtBQUssRUFBRSxVQUFVLElBQUksRUFBRTtRQUN2QixRQUFRLEVBQUUsUUFBUSxJQUFJLEVBQUU7S0FDekIsQ0FBQTtBQUNILENBQUM7QUFqREQsc0NBaURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2NyaXB0YWJsZVNjZW5lIH0gZnJvbSAnLi4vU2NyaXB0YWJsZVNjZW5lJ1xuaW1wb3J0IHsgSVNpbXBsaWZpZWROb2RlIH0gZnJvbSAnLi4vaW50ZXJmYWNlcydcblxuY29uc3Qgc3RhY2s6IGFueVtdID0gW11cblxuZXhwb3J0IHR5cGUgQ29tcG9uZW50Q2hpbGQgPSBKU1guRWxlbWVudFxuZXhwb3J0IHR5cGUgQ29tcG9uZW50Q2hpbGRyZW4gPSBDb21wb25lbnRDaGlsZFtdXG5cbmV4cG9ydCB0eXBlIENvbXBvbmVudEZhY3Rvcnk8UD4gPSBDb21wb25lbnRDb25zdHJ1Y3RvcjxQPiB8IEZ1bmN0aW9uYWxDb21wb25lbnQ8UD5cblxuZXhwb3J0IHR5cGUgUmVuZGVyYWJsZVByb3BzPFA+ID0gUmVhZG9ubHk8UD4gJiBSZWFkb25seTx7IGNoaWxkcmVuPzogQ29tcG9uZW50Q2hpbGRyZW4gfT5cblxuZXhwb3J0IGludGVyZmFjZSBGdW5jdGlvbmFsQ29tcG9uZW50PFByb3BzID0ge30+IHtcbiAgKHByb3BzOiBSZW5kZXJhYmxlUHJvcHM8UHJvcHM+LCBjb250ZXh0PzogYW55KTogSVNpbXBsaWZpZWROb2RlIHwgbnVsbFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvbmVudENvbnN0cnVjdG9yPFByb3BzID0ge30sIFN0YXRlID0ge30+IHtcbiAgbmV3IChwcm9wczogUHJvcHMsIGNvbnRleHQ/OiBhbnkpOiBTY3JpcHRhYmxlU2NlbmU8UHJvcHMsIFN0YXRlPlxufVxuXG4vKipcbiAqIEpTWC9oeXBlcnNjcmlwdCByZXZpdmVyLlxuICogQHNlZSBodHRwOi8vamFzb25mb3JtYXQuY29tL3d0Zi1pcy1qc3hcbiAqXG4gKiBDcmVhdGVzIGEgSVNpbXBsaWZpZWROb2RlICh2aXJ0dWFsIGVudGl0eSkuIEEgdHJlZSBvZiBJU2ltcGxpZmllZE5vZGUgY2FuIGJlIHVzZWQgYXMgYSBsaWdodHdlaWdodCByZXByZXNlbnRhdGlvblxuICogb2YgdGhlIHN0cnVjdHVyZSBvZiBhIGVudGl0eSB0cmVlLiBUaGlzIHN0cnVjdHVyZSBjYW4gYmUgcmVhbGl6ZWQgYnkgcmVjdXJzaXZlbHkgY29tcGFyaW5nIGl0IGFnYWluc3RcbiAqIHRoZSBjdXJyZW50IF9hY3R1YWxfIGVudGl0eSBzdHJ1Y3R1cmUsIGFuZCBhcHBseWluZyBvbmx5IHRoZSBkaWZmZXJlbmNlcy5cbiAqXG4gKiBgY3JlYXRlRWxlbWVudCgpYCBhY2NlcHRzIGFuIGVsZW1lbnQgbmFtZSwgYSBsaXN0IG9mIGF0dHJpYnV0ZXMvcHJvcHMsXG4gKiBhbmQgb3B0aW9uYWxseSBjaGlsZHJlbiB0byBhcHBlbmQgdG8gdGhlIGVsZW1lbnQuXG4gKlxuICogQGV4YW1wbGUgVGhlIGZvbGxvd2luZyBlbnRpdHkgdHJlZVxuICpcbiAqIGA8Ym94IHBvc2l0aW9uPXt7eDogMSwgeTogMiwgejogM319IC8+YFxuICpcbiAqIGNhbiBiZSBjb25zdHJ1Y3RlZCB1c2luZyB0aGlzIGZ1bmN0aW9uIGFzOlxuICpcbiAqIGBjcmVhdGVFbGVtZW50KCdib3gnLCB7IHBvc2l0aW9uOiB7eDogMSwgeTogMiwgejogM30gfSk7YFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBub2RlTmFtZVx0QW4gZW50aXR5IG5hbWUuIEV4OiBgc2NlbmVgLCBgYm94YCwgYGdsdGYtbW9kZWxgLCBldGMuXG4gKiBAcGFyYW0ge09iamVjdH0gYXR0cmlidXRlc1x0QW55IGF0dHJpYnV0ZXMvcHJvcHMgdG8gc2V0IG9uIHRoZSBjcmVhdGVkIGVudGl0eS5cbiAqIEBwYXJhbSByZXN0IEFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSB0YWtlbiB0byBiZSBjaGlsZHJlbiB0byBhcHBlbmQuIENhbiBiZSBpbmZpbml0ZWx5IG5lc3RlZCBBcnJheXMuXG4gKlxuICogQHB1YmxpY1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFbGVtZW50PFA+KFxuICBub2RlOiBDb21wb25lbnRGYWN0b3J5PFA+LFxuICBwYXJhbXM6IEpTWC5CYXNlRW50aXR5ICYgUCB8IG51bGwsXG4gIC4uLmNoaWxkcmVuOiAoQ29tcG9uZW50Q2hpbGQgfCBDb21wb25lbnRDaGlsZHJlbilbXVxuKTogSVNpbXBsaWZpZWROb2RlXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRWxlbWVudDxLIGV4dGVuZHMga2V5b2YgSlNYLkludHJpbnNpY0VsZW1lbnRzPihcbiAgbm9kZTogSyxcbiAgcGFyYW1zOiBKU1guSW50cmluc2ljRWxlbWVudHNbS10sXG4gIC4uLmNoaWxkcmVuOiAoQ29tcG9uZW50Q2hpbGQgfCBDb21wb25lbnRDaGlsZHJlbilbXVxuKTogSVNpbXBsaWZpZWROb2RlXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRWxlbWVudChcbiAgbm9kZTogc3RyaW5nLFxuICBwYXJhbXM6IFJlY29yZDxzdHJpbmcsIGFueT4gfCBudWxsLFxuICAuLi5jaGlsZHJlbjogKENvbXBvbmVudENoaWxkIHwgQ29tcG9uZW50Q2hpbGRyZW4pW11cbik6IElTaW1wbGlmaWVkTm9kZVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQobm9kZU5hbWU6IHN0cmluZyB8IEZ1bmN0aW9uLCBhdHRyaWJ1dGVzOiBhbnkpIHtcbiAgbGV0IGNoaWxkcmVuOiBJU2ltcGxpZmllZE5vZGVbXSA9IFtdXG4gIGxldCBsYXN0U2ltcGxlOiBib29sZWFuID0gZmFsc2VcbiAgbGV0IGNoaWxkXG4gIGxldCBzaW1wbGU6IGJvb2xlYW4gPSBmYWxzZVxuICBsZXQgaVxuICBsZXQgbm9kZVR5cGU6IHN0cmluZ1xuXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzcGFjZS13aXRoaW4tcGFyZW5zXG4gIGZvciAoaSA9IGFyZ3VtZW50cy5sZW5ndGg7IGktLSA+IDI7ICkge1xuICAgIGlmIChhcmd1bWVudHNbaV0gJiYgdHlwZW9mIGFyZ3VtZW50c1tpXSAhPT0gJ3N0cmluZycpIHN0YWNrLnB1c2goYXJndW1lbnRzW2ldKVxuICB9XG4gIGlmIChhdHRyaWJ1dGVzKSB7XG4gICAgaWYgKGF0dHJpYnV0ZXMuY2hpbGRyZW4gIT0gbnVsbCkge1xuICAgICAgaWYgKCFzdGFjay5sZW5ndGgpIHN0YWNrLnB1c2goYXR0cmlidXRlcy5jaGlsZHJlbilcbiAgICAgIGRlbGV0ZSBhdHRyaWJ1dGVzLmNoaWxkcmVuXG4gICAgfVxuICB9XG4gIHdoaWxlIChzdGFjay5sZW5ndGgpIHtcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uZGl0aW9uYWwtYXNzaWdubWVudFxuICAgIGlmICgoY2hpbGQgPSBzdGFjay5wb3AoKSkgJiYgY2hpbGQucG9wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpzcGFjZS13aXRoaW4tcGFyZW5zXG4gICAgICBmb3IgKGkgPSBjaGlsZC5sZW5ndGg7IGktLTsgKSBzdGFjay5wdXNoKGNoaWxkW2ldKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodHlwZW9mIGNoaWxkID09PSAnYm9vbGVhbicpIGNoaWxkID0gbnVsbFxuXG4gICAgICBub2RlVHlwZSA9IHR5cGVvZiBub2RlTmFtZVxuXG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tY29uZGl0aW9uYWwtYXNzaWdubWVudFxuICAgICAgaWYgKChzaW1wbGUgPSBub2RlVHlwZSAhPT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgaWYgKGNoaWxkID09IG51bGwpIGNoaWxkID0gbnVsbFxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgY2hpbGQgIT09ICdzdHJpbmcnKSBzaW1wbGUgPSBmYWxzZVxuICAgICAgfVxuXG4gICAgICBpZiAoc2ltcGxlICYmIGxhc3RTaW1wbGUpIHtcbiAgICAgICAgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0gKz0gY2hpbGRcbiAgICAgIH0gZWxzZSBpZiAoY2hpbGQpIHtcbiAgICAgICAgY2hpbGRyZW4ucHVzaChjaGlsZClcbiAgICAgIH1cblxuICAgICAgbGFzdFNpbXBsZSA9IHNpbXBsZVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdGFnOiBub2RlTmFtZSxcbiAgICBhdHRyczogYXR0cmlidXRlcyB8fCB7fSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4gfHwgW11cbiAgfVxufVxuIl19