import { EventDispatcher, EventDispatcherBinding } from '../common/core/EventDispatcher';
export class EventSubscriber extends EventDispatcher {
    constructor(component) {
        super();
        this.component = component;
        component.onSubscribedEvent((data) => {
            super.emit(data.event, data);
        });
    }
    on(event, handler) {
        if (this.getEventBindings(event).length === 0) {
            this.component.subscribe(event).catch(e => this.emit('error', e));
        }
        return super.on.apply(this, arguments);
    }
    off(event) {
        let theEventToValidate = null;
        const offResult = super.off.apply(this, arguments);
        if (typeof event === 'string') {
            theEventToValidate = event;
        }
        else if (event instanceof EventDispatcherBinding) {
            event = event.event;
        }
        if (theEventToValidate !== null) {
            if (this.getEventBindings(theEventToValidate).length === 0) {
                this.component.unsubscribe(theEventToValidate).catch(e => this.emit('error', e));
            }
        }
        return offResult;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXZlbnRTdWJzY3JpYmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NsaWVudC9FdmVudFN1YnNjcmliZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFBO0FBR3hGLE1BQU0sT0FBTyxlQUFnQixTQUFRLGVBQWU7SUFDbEQsWUFBb0IsU0FBMkI7UUFDN0MsS0FBSyxFQUFFLENBQUE7UUFEVyxjQUFTLEdBQVQsU0FBUyxDQUFrQjtRQUc3QyxTQUFTLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFTLEVBQUUsRUFBRTtZQUN4QyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDOUIsQ0FBQyxDQUFDLENBQUE7SUFDSixDQUFDO0lBU0QsRUFBRSxDQUFDLEtBQWEsRUFBRSxPQUFZO1FBQzVCLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDN0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtTQUNsRTtRQUNELE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFBO0lBQ3hDLENBQUM7SUFPRCxHQUFHLENBQUMsS0FBaUQ7UUFDbkQsSUFBSSxrQkFBa0IsR0FBa0IsSUFBSSxDQUFBO1FBQzVDLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQTtRQUVsRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM3QixrQkFBa0IsR0FBRyxLQUFLLENBQUE7U0FDM0I7YUFBTSxJQUFJLEtBQUssWUFBWSxzQkFBc0IsRUFBRTtZQUNsRCxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQTtTQUNwQjtRQUVELElBQUksa0JBQWtCLEtBQUssSUFBSSxFQUFFO1lBQy9CLElBQUksSUFBSSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFJMUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQ2pGO1NBQ0Y7UUFFRCxPQUFPLFNBQVMsQ0FBQTtJQUNsQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudERpc3BhdGNoZXIsIEV2ZW50RGlzcGF0Y2hlckJpbmRpbmcgfSBmcm9tICcuLi9jb21tb24vY29yZS9FdmVudERpc3BhdGNoZXInXG5pbXBvcnQgeyBJU3Vic2NyaWJhYmxlQVBJIH0gZnJvbSAnLi4vaG9zdC9BUEknXG5cbmV4cG9ydCBjbGFzcyBFdmVudFN1YnNjcmliZXIgZXh0ZW5kcyBFdmVudERpc3BhdGNoZXIge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbXBvbmVudDogSVN1YnNjcmliYWJsZUFQSSkge1xuICAgIHN1cGVyKClcblxuICAgIGNvbXBvbmVudC5vblN1YnNjcmliZWRFdmVudCgoZGF0YTogYW55KSA9PiB7XG4gICAgICBzdXBlci5lbWl0KGRhdGEuZXZlbnQsIGRhdGEpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgYSBuZXcgbGlzdGVuZXIgZm9yIGFuIHNwZWNpZmljIGV2ZW50LlxuICAgKiBAcGFyYW0gZXZlbnQgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAqIEBwYXJhbSBoYW5kbGVyIEEgaGFuZGxlciB3aGljaCBiZSBjYWxsZWQgZWFjaCB0aW1lIHRoZSBldmVudCBpcyByZWNlaXZlZFxuICAgKi9cbiAgb24oZXZlbnQ6IHN0cmluZywgY2FsbGJhY2s6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCwgb25jZT86IGJvb2xlYW4pOiBFdmVudERpc3BhdGNoZXJCaW5kaW5nXG4gIG9uKGV2ZW50OiBzdHJpbmcsIGNhbGxiYWNrOiBhbnksIG9uY2U/OiBib29sZWFuKTogRXZlbnREaXNwYXRjaGVyQmluZGluZ1xuICBvbihldmVudDogc3RyaW5nLCBoYW5kbGVyOiBhbnkpIHtcbiAgICBpZiAodGhpcy5nZXRFdmVudEJpbmRpbmdzKGV2ZW50KS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRoaXMuY29tcG9uZW50LnN1YnNjcmliZShldmVudCkuY2F0Y2goZSA9PiB0aGlzLmVtaXQoJ2Vycm9yJywgZSkpXG4gICAgfVxuICAgIHJldHVybiBzdXBlci5vbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIGxpc3RlbmVyIGZvciBhbiBzcGVjaWZpYyBldmVudFxuICAgKiBAcGFyYW0gZXZlbnQgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAqIEBwYXJhbSBiaW5kaW5nIEEgcmVmZXJlbmNlIHRvIGEgYmluZGluZyByZXR1cm5lZCBieSBhIHByZXZpb3VzIGBhZGRFdmVudExpc3RlbmVyYCBjYWxsXG4gICAqL1xuICBvZmYoZXZlbnQ6IHN0cmluZyB8IEV2ZW50RGlzcGF0Y2hlckJpbmRpbmcgfCBGdW5jdGlvbikge1xuICAgIGxldCB0aGVFdmVudFRvVmFsaWRhdGU6IHN0cmluZyB8IG51bGwgPSBudWxsXG4gICAgY29uc3Qgb2ZmUmVzdWx0ID0gc3VwZXIub2ZmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcblxuICAgIGlmICh0eXBlb2YgZXZlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGVFdmVudFRvVmFsaWRhdGUgPSBldmVudFxuICAgIH0gZWxzZSBpZiAoZXZlbnQgaW5zdGFuY2VvZiBFdmVudERpc3BhdGNoZXJCaW5kaW5nKSB7XG4gICAgICBldmVudCA9IGV2ZW50LmV2ZW50XG4gICAgfVxuXG4gICAgaWYgKHRoZUV2ZW50VG9WYWxpZGF0ZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKHRoaXMuZ2V0RXZlbnRCaW5kaW5ncyh0aGVFdmVudFRvVmFsaWRhdGUpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAvLyBJZiB3ZSBhcmUgcmVtb3ZpbmcgdGhlIGxhc3QgZXZlbnQgbGlzdGVuZXIsIHJlbW92ZSBpdCBhbHNvIGZyb20gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyB0aGlzIHdpbGwga2VlcCBsaXN0ZW5lcnMgdW5yZWxhdGVkIHRvIHRoZSBjb21wb25lbnQgaW50YWN0XG5cbiAgICAgICAgdGhpcy5jb21wb25lbnQudW5zdWJzY3JpYmUodGhlRXZlbnRUb1ZhbGlkYXRlKS5jYXRjaChlID0+IHRoaXMuZW1pdCgnZXJyb3InLCBlKSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2ZmUmVzdWx0XG4gIH1cbn1cbiJdfQ==