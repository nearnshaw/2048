import { ISimplifiedNode, Vector3Component, TransitionComponent, SkeletalAnimationComponent, IBillboardModes, SoundComponent, ITransparencyModes } from './interfaces';
import { IEvents } from './events';
declare global {
    namespace JSX {
        type Element = ISimplifiedNode;
        type ColorComponent = string;
        type BaseEntity = {
            /**
             * The ID is used to attach events and identify the entity in the scene tree
             */
            id?: string;
            /**
             * The function that handles the click interaction event
             */
            onClick?: (e: IEvents['click']) => void;
            /**
             * Moves the entity center to that point
             */
            position?: Vector3Component;
            /**
             * Scales the entity in three dimensions
             */
            scale?: Vector3Component | number;
            /**
             * Rotates the entity
             * The `x,y,z` components are degrees (0°-360°), and every component represents the rotation in that axis
             */
            rotation?: Vector3Component;
            /**
             * Rotate the entity to look at a direction
             */
            lookAt?: Vector3Component;
            /**
             * Used to differentiate similar entities in lists
             */
            key?: string | number;
            /**
             * Defines if the entity and its children should be rendered
             */
            visible?: boolean;
            /**
             * Used to animate the transitions in the same fashion as CSS
             */
            transition?: TransitionComponent;
            /**
             * Billboard defines a behavior that makes the entity face the camera in any moment.
             * There are three combinable types of camera facing options defined in the object BillboardModes.
             *   BILLBOARDMODE_NONE: 0
             *   BILLBOARDMODE_X: 1
             *   BILLBOARDMODE_Y: 2
             *   BILLBOARDMODE_Z: 4
             *   BILLBOARDMODE_ALL: 7
             *
             * To combine billboard types write those in the form:
             *   BillboardModes.BILLBOARDMODE_X | BillboardModes.BILLBOARDMODE_Y
             */
            billboard?: IBillboardModes;
            /**
             * Adds spatial sound to the entities
             */
            sound?: SoundComponent;
        };
        type MaterialDescriptorEntity = {
            /**
             * Id of the material, it will be used to pick this material from other entities
             */
            id: string;
            /**
             * Opacity.
             */
            alpha?: number;
            /**
             * The color of a material in ambient lighting.
             */
            ambientColor?: ColorComponent;
            /**
             * AKA Diffuse Color in other nomenclature.
             */
            albedoColor?: ColorComponent;
            /**
             * AKA Specular Color in other nomenclature.
             */
            reflectivityColor?: ColorComponent;
            /**
             * The color reflected from the material.
             */
            reflectionColor?: ColorComponent;
            /**
             * The color emitted from the material.
             */
            emissiveColor?: ColorComponent;
            /**
             * Specifies the metallic scalar of the metallic/roughness workflow.
             * Can also be used to scale the metalness values of the metallic texture.
             */
            metallic?: number;
            /**
             * Specifies the roughness scalar of the metallic/roughness workflow.
             * Can also be used to scale the roughness values of the metallic texture.
             */
            roughness?: number;
            /**
             * Texture applied as material.
             */
            albedoTexture?: string;
            /**
             * Texture applied as opacity. Default: the same texture used in albedoTexture.
             */
            alphaTexture?: string;
            /**
             * Emmisive texture.
             */
            emisiveTexture?: string;
            /**
             * Stores surface normal data used to displace a mesh in a texture.
             */
            bumpTexture?: string;
            /**
             * Stores the refracted light information in a texture.
             */
            refractionTexture?: string;
            /**
             * Intensity of the direct lights e.g. the four lights available in scene.
             * This impacts both the direct diffuse and specular highlights.
             */
            directIntensity?: number;
            /**
             * Intensity of the emissive part of the material.
             * This helps controlling the emissive effect without modifying the emissive color.
             */
            emissiveIntensity?: number;
            /**
             * Intensity of the environment e.g. how much the environment will light the object
             * either through harmonics for rough material or through the refelction for shiny ones.
             */
            environmentIntensity?: number;
            /**
             * This is a special control allowing the reduction of the specular highlights coming from the
             * four lights of the scene. Those highlights may not be needed in full environment lighting.
             */
            specularIntensity?: number;
            /**
             * AKA Glossiness in other nomenclature.
             */
            microSurface?: number;
            /**
             * If sets to true, disables all the lights affecting the material.
             */
            disableLighting?: boolean;
            /**
             * Sets the transparency mode of the material.
             *
             * | Value | Type                                |
             * | ----- | ----------------------------------- |
             * | 0     | OPAQUE  (default)                   |
             * | 1     | ALPHATEST                           |
             * | 2     | ALPHABLEND                          |
             * | 3     | ALPHATESTANDBLEND                   |
             */
            transparencyMode?: ITransparencyModes;
            /**
             * Does the albedo texture has alpha?
             */
            hasAlpha?: boolean;
        };
        type MaterialEntity = BaseEntity & {
            /**
             * Color of the vertices
             */
            color?: string | number;
            /**
             * Material selector
             */
            material?: string;
            /**
             * Set to true to turn on the collider for the entity.
             */
            withCollisions?: boolean;
        };
        type PlaneEntity = MaterialEntity & {
            /**
             * Array of floats containing a set of uv coordinates per vertex per face
             * First 8 values will be the UVs for the front face, the next 8 will affect the back face.
             */
            uvs?: number[];
        };
        type BasicMaterialEntity = {
            /**
             * Id of the material, it will be used to pick this material from other entities
             */
            id: string;
            /**
             * The source of the texture image
             */
            texture: string;
            /**
             * Enabled crisper images based on the provided sampling mode
             * | Value | Type      |
             * |-------|-----------|
             * |     1 | NEAREST   |
             * |     2 | BILINEAR  |
             * |     3 | TRILINEAR |
             */
            samplingMode?: number;
            /**
             * A number between 0 and 1.
             * Any pixel with an alpha lower than this value will be shown as transparent.
             */
            alphaTest?: number;
        };
        type SystemEntity = BaseEntity & {
            /**
             * The source URL of the system
             */
            src: string;
        };
        type CircleEntity = MaterialEntity & {
            /**
             * Radial segments of the geometry. 4 will render a tetrahedron.
             */
            segments?: number;
            /**
             * How much of the arc should be rendered, 360 by default (degrees)
             */
            arc?: number;
        };
        type GltfEntity = BaseEntity & {
            /**
             * The source URL of the .gltf or .glb model, required
             */
            src: string;
            /**
             * List of weighted skeletal animations
             */
            skeletalAnimation?: SkeletalAnimationComponent;
        };
        type ObjEntity = BaseEntity & {
            /**
             * The source URL of the .obj required
             */
            src: string;
        };
        type InputTextEntity = BaseEntity & {
            /**
             * The text color in hexadecimal format (`#ff0000`)
             */
            color?: string;
            /**
             * The name of the font to be used
             */
            fontFamily?: string;
            /**
             * The text size
             */
            fontSize?: number;
            /**
             * The content of the input
             */
            value?: string;
            /**
             * The width of the input box
             */
            width?: number;
            /**
             * The height of the input box
             */
            height?: number;
            /**
             * The background color in hexadecimal format (`#ff0000`)
             */
            background?: string;
            /**
             * The focused ackground color in hexadecimal format (`#ff0000`)
             */
            focusedBackground?: string;
            /**
             * The width of the input box's outline
             */
            outlineWidth?: number;
            /**
             * The maximun amount of characters for the input
             */
            maxLength?: number;
            /**
             * Placeholder text to be shown when the input is empty and blurred.
             */
            placeholder?: string;
        };
        type TextEntity = BaseEntity & {
            /**
             * The width of the texts outline
             */
            outlineWidth?: number;
            /**
             * The outline color in hexadecimal format (`#ff0000`)
             */
            outlineColor?: string;
            /**
             * The text color in hexadecimal format (`#ff0000`)
             */
            color?: string;
            /**
             * The name of the font to be used
             */
            fontFamily?: string;
            /**
             * The text size
             */
            fontSize?: number;
            /**
             * The weight of the text
             */
            fontWeight?: string;
            /**
             * The text size
             */
            opacity?: number;
            /**
             * The content of the text
             */
            value: string;
            /**
             * The size of the space between lines
             */
            lineSpacing?: string;
            /**
             * If set to true the text will wrap to the next line when the maximun width is reached
             */
            textWrapping?: boolean;
            /**
             * Horizontal alignment (`top`, `right`, `bottom` or `left`)
             */
            hAlign?: string;
            /**
             * Vertical alignment (`top`, `right`, `bottom` or `left`)
             */
            vAlign?: string;
            /**
             * The text width
             */
            width?: number;
            /**
             * The text height
             */
            height?: number;
            lineCount?: number;
            resizeToFit?: boolean;
            shadowBlur?: number;
            shadowOffsetX?: number;
            shadowOffsetY?: number;
            shadowColor?: string;
            zIndex?: number;
            paddingTop?: number;
            paddingRight?: number;
            paddingBottom?: number;
            paddingLeft?: number;
        };
        type VideoEntity = BaseEntity & {
            /**
             * The source URL of the video (required)
             */
            src: string;
            /**
             * The height of the video
             */
            height?: number;
            /**
             * The width of the video
             */
            width?: number;
            /**
             * If set to `true` the video will begin playing. Browser restrictions on autoplay apply.
             */
            play?: boolean;
            /**
             * If set to `true` the video will restart after ending
             */
            loop?: boolean;
            /**
             * The volume of the video as a number between 0 and 100
             */
            volume?: number;
        };
        type CylinderEntity = MaterialEntity & {
            /**
             * Radius (meters)
             */
            radius?: number;
            /**
             * How much of the arc should be rendered, 360 by default (degrees)
             */
            arc?: number;
            /**
             * Radius of the top face (meters)
             */
            radiusTop?: number;
            /**
             * Radius of the bottom face (meters)
             */
            radiusBottom?: number;
            /**
             * Radial segments of the geometry. 4 will render a tetrahedron.
             */
            segmentsRadial?: number;
            /**
             * Vertical segments of the geometry
             */
            segmentsHeight?: number;
            /**
             * Render caps
             */
            openEnded?: boolean;
        };
        interface IntrinsicElements {
            material: MaterialDescriptorEntity;
            ['basic-material']: BasicMaterialEntity;
            scene: BaseEntity;
            entity: BaseEntity;
            box: MaterialEntity;
            circle: CircleEntity;
            plane: PlaneEntity;
            sphere: MaterialEntity;
            cylinder: CylinderEntity;
            cone: CylinderEntity;
            text: TextEntity;
            video: VideoEntity;
            ['gltf-model']: GltfEntity;
            ['obj-model']: ObjEntity;
            ['input-text']: InputTextEntity;
        }
    }
}
