"use strict";
/*
    This file is part of web3.js.

    web3.js is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    web3.js is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.messageId = 0;
/**
 * Should be called to valid json create payload object
 *
 * @method toPayload
 * @param {Function} method of jsonrpc call, required
 * @param {Array} params, an array of method params, optional
 * @returns {object} valid jsonrpc payload object
 */
function toPayload(method, params) {
    if (!method) {
        throw new Error('jsonrpc method should be specified!');
    }
    if (typeof method !== 'string') {
        throw new Error(`jsonrpc must be a string, got ${typeof method}!`);
    }
    // advance message ID
    exports.messageId++;
    return {
        jsonrpc: '2.0',
        id: exports.messageId,
        method: method,
        params: params || []
    };
}
exports.toPayload = toPayload;
/**
 * Should be called to check if jsonrpc response is valid
 *
 * @method isValidResponse
 * @param {object}
 * @returns {Boolean} true if response is valid, otherwise false
 */
function isValidResponse(response) {
    return Array.isArray(response) ? response.every(validateSingleMessage) : validateSingleMessage(response);
    function validateSingleMessage(message) {
        return (!!message &&
            !message.error &&
            message.jsonrpc === '2.0' &&
            typeof message.id === 'number' &&
            message.result !== undefined); // only undefined is not valid json object
    }
}
exports.isValidResponse = isValidResponse;
/**
 * Should be called to create batch payload object
 *
 * @method toBatchPayload
 * @param {Array} messages, an array of objects with method (required) and params (optional) fields
 * @returns {Array} batch payload
 */
function toBatchPayload(messages) {
    return messages.map(function (message) {
        return toPayload(message.method, message.params);
    });
}
exports.toBatchPayload = toBatchPayload;
//# sourceMappingURL=jsonrpc.js.map