"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("./types");
function applyPatch(tree, diffs, createEntity) {
    let length = diffs.length;
    if (length === 0) {
        return true;
    }
    for (let i = 0; i < length; i++) {
        if (!applyDiff(tree, diffs[i], createEntity)) {
            return false;
        }
    }
    return true;
}
exports.applyPatch = applyPatch;
function getNodeFromRoute(tree, route) {
    const _route = route.slice();
    let node = tree;
    while (_route.length > 0 && node) {
        let index = _route.shift();
        node = node.getChildByIndex(index);
    }
    return node;
}
function applyDiff(tree, diff, createEntity) {
    let node = getNodeFromRoute(tree, diff[types_1.Actions.route]);
    let route;
    switch (diff[types_1.Actions.action]) {
        case types_1.Actions.addAttribute:
            if (!node) {
                return false;
            }
            // do nothing, the actual change happens inside modifyAttribute
            break;
        case types_1.Actions.modifyAttribute:
            if (!node) {
                return false;
            }
            node.setAttributes({ [diff[types_1.Actions.name]]: diff[types_1.Actions.newValue] });
            break;
        case types_1.Actions.removeAttribute:
            if (!node || !node.removeAttribute) {
                return false;
            }
            node.removeAttribute(diff[types_1.Actions.name]);
            break;
        case types_1.Actions.replaceElement:
            node.replaceBy(createEntity(diff[types_1.Actions.newValue]));
            break;
        case types_1.Actions.relocateGroup:
            const nodeArray = node
                .childEntities()
                .splice(diff[types_1.Actions.from], diff[types_1.Actions.groupLength])
                .reverse();
            const target = node.getChildByIndex(diff[types_1.Actions.to]);
            for (let i = 0; i < nodeArray.length; i++) {
                node.insertAfter(nodeArray[i], target);
            }
            break;
        case types_1.Actions.removeElement:
            node.removeFromParent();
            break;
        case types_1.Actions.addElement:
            route = diff[types_1.Actions.route].slice();
            const position = route.pop();
            node = getNodeFromRoute(tree, route);
            if (node) {
                const entity = createEntity(diff[types_1.Actions.element]);
                const beforeEntity = node.getChildByIndex(position);
                if (beforeEntity) {
                    node.insertBefore(entity, beforeEntity);
                }
                else {
                    node.add(entity);
                }
            }
            else
                return false;
            break;
        default:
            // tslint:disable-next-line:no-console
            console.log('unknown action');
    }
    return true;
}
//# sourceMappingURL=data:application/json;base64,