import { RequestManager } from './RequestManager';
import { Contract } from './Contract';
import { TransactionOptions, Data } from './Schema';
/**
 * Should be called to create new ContractFactory instance
 *
 * @method ContractFactory
 * @param {Array} abi
 */
export declare class ContractFactory {
    requestManager: RequestManager;
    abi: any[];
    constructor(requestManager: RequestManager, abi: any[]);
    /**
     * Should be called to create new contract on a blockchain
     *
     * @method new
     * @param {Any} contract constructor param1 (optional)
     * @param {Any} contract constructor param2 (optional)
     * @param {object} contract transaction object (required)
     * @param {Function} callback
     * @returns {Contract} returns contract instance
     */
    deploy(param1: any, param2: any, options: TransactionOptions): Promise<Contract>;
    deploy(param1: any, options: TransactionOptions): Promise<Contract>;
    deploy(options: TransactionOptions): Promise<Contract>;
    /**
     * Should be called to get access to existing contract on a blockchain
     *
     * @method at
     * @param {Address} contract address (required)
     * @param {Function} callback {optional)
     * @returns {Contract} returns contract if no callback was passed,
     * otherwise calls callback function (err, contract)
     */
    at(address: string): Promise<Contract>;
    /**
     * Gets the data, which is data to deploy plus constructor params
     *
     * @method getData
     */
    getData(...args: any[]): Promise<Data>;
}
