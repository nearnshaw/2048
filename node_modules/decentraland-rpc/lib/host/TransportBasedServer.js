import { Server } from '../common/json-rpc/Server';
export class TransportBasedServer extends Server {
    constructor(transport, opt = {}) {
        super(opt);
        this.transport = transport;
        if (!this.transport) {
            throw new TypeError('transport cannot be undefined or null');
        }
        this.transport.onMessage(msg => {
            this.processMessage(this.transport, msg);
        });
        if (this.transport.onError) {
            this.transport.onError(err => this.emit('error', err));
        }
        if (this.transport.onClose) {
            this.transport.onClose(() => this.disable());
        }
    }
    sendMessage(receiver, message) {
        receiver.sendMessage(message);
    }
    getAllClients() {
        return [this.transport];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVHJhbnNwb3J0QmFzZWRTZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaG9zdC9UcmFuc3BvcnRCYXNlZFNlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFHbEQsTUFBTSxPQUFPLG9CQUFxQixTQUFRLE1BQTBCO0lBQ2xFLFlBQW1CLFNBQTZCLEVBQUUsTUFBbUIsRUFBRTtRQUNyRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7UUFETyxjQUFTLEdBQVQsU0FBUyxDQUFvQjtRQUc5QyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNuQixNQUFNLElBQUksU0FBUyxDQUFDLHVDQUF1QyxDQUFDLENBQUE7U0FDN0Q7UUFFRCxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM3QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFDMUMsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFO1lBQzFCLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQTtTQUN2RDtRQUVELElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7U0FDN0M7SUFDSCxDQUFDO0lBRUQsV0FBVyxDQUFDLFFBQTRCLEVBQUUsT0FBZTtRQUN2RCxRQUFRLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQy9CLENBQUM7SUFFRCxhQUFhO1FBQ1gsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUN6QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXJ2ZXIgfSBmcm9tICcuLi9jb21tb24vanNvbi1ycGMvU2VydmVyJ1xuaW1wb3J0IHsgSVNlcnZlck9wdHMsIFNjcmlwdGluZ1RyYW5zcG9ydCB9IGZyb20gJy4uL2NvbW1vbi9qc29uLXJwYy90eXBlcydcblxuZXhwb3J0IGNsYXNzIFRyYW5zcG9ydEJhc2VkU2VydmVyIGV4dGVuZHMgU2VydmVyPFNjcmlwdGluZ1RyYW5zcG9ydD4ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgdHJhbnNwb3J0OiBTY3JpcHRpbmdUcmFuc3BvcnQsIG9wdDogSVNlcnZlck9wdHMgPSB7fSkge1xuICAgIHN1cGVyKG9wdClcblxuICAgIGlmICghdGhpcy50cmFuc3BvcnQpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3RyYW5zcG9ydCBjYW5ub3QgYmUgdW5kZWZpbmVkIG9yIG51bGwnKVxuICAgIH1cblxuICAgIHRoaXMudHJhbnNwb3J0Lm9uTWVzc2FnZShtc2cgPT4ge1xuICAgICAgdGhpcy5wcm9jZXNzTWVzc2FnZSh0aGlzLnRyYW5zcG9ydCwgbXNnKVxuICAgIH0pXG5cbiAgICBpZiAodGhpcy50cmFuc3BvcnQub25FcnJvcikge1xuICAgICAgdGhpcy50cmFuc3BvcnQub25FcnJvcihlcnIgPT4gdGhpcy5lbWl0KCdlcnJvcicsIGVycikpXG4gICAgfVxuXG4gICAgaWYgKHRoaXMudHJhbnNwb3J0Lm9uQ2xvc2UpIHtcbiAgICAgIHRoaXMudHJhbnNwb3J0Lm9uQ2xvc2UoKCkgPT4gdGhpcy5kaXNhYmxlKCkpXG4gICAgfVxuICB9XG5cbiAgc2VuZE1lc3NhZ2UocmVjZWl2ZXI6IFNjcmlwdGluZ1RyYW5zcG9ydCwgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgcmVjZWl2ZXIuc2VuZE1lc3NhZ2UobWVzc2FnZSlcbiAgfVxuXG4gIGdldEFsbENsaWVudHMoKSB7XG4gICAgcmV0dXJuIFt0aGlzLnRyYW5zcG9ydF1cbiAgfVxufVxuIl19