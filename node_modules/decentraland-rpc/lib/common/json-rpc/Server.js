import { createCodec, encode, decode } from 'msgpack-lite';
import { EventDispatcher } from '../core/EventDispatcher';
import { isPromiseLike } from '../core/isPromiseLike';
const codec = createCodec();
const errorColumns = { name: 1, message: 1, stack: 1, columnNumber: 1, fileName: 1, lineNumber: 1 };
function sanitizeError(error) {
    if (error instanceof Error) {
        const ret = Object.assign({}, error);
        for (let i in errorColumns) {
            ret[i] = error[i];
        }
        return ret;
    }
    else {
        return error;
    }
}
export class Server extends EventDispatcher {
    constructor(opts = {}) {
        super();
        this.sendEncoding = 'JSON';
        this._exposedMethodsMap = new Map();
        this._consoleLog = false;
        this._isEnabled = false;
        this.setLogging(opts);
    }
    get isEnabled() {
        return this._isEnabled;
    }
    on(method, callback, once) {
        return super.on(method, callback, once);
    }
    once(method, callback) {
        return super.once(method, callback);
    }
    setLogging({ logConsole } = {}) {
        this._consoleLog = !!logConsole;
    }
    expose(method, handler) {
        this._exposedMethodsMap.set(method, handler);
    }
    notify(method, params) {
        if (typeof params !== 'undefined' && typeof params !== 'object') {
            throw new Error(`Server#notify Params must be structured data (Array | Object) got ${JSON.stringify(params)}`);
        }
        const clients = this.getAllClients();
        if (clients) {
            for (let client of clients) {
                this._send(client, { method, params, jsonrpc: '2.0' });
            }
        }
        else {
            throw new Error('Server does not support broadcasting. No "getAllClients: ClientType[]" returned null');
        }
    }
    enable() {
        if (!this._isEnabled) {
            this._isEnabled = true;
            this.notify('RPC.Enabled');
        }
    }
    disable() {
        if (this._isEnabled) {
            this._isEnabled = false;
        }
    }
    processMessage(from, messageStr) {
        this._logMessage(messageStr, 'receive');
        let request;
        try {
            if (typeof messageStr === 'string' && messageStr.charAt(0) === '{') {
                request = JSON.parse(messageStr);
            }
            else if (typeof messageStr === 'string' || messageStr instanceof Uint8Array || messageStr instanceof Array) {
                request = decode(messageStr, { codec });
                this.sendEncoding = 'msgpack';
            }
            else {
                throw new Error(`Unable to parse message ${JSON.stringify(messageStr)}`);
            }
        }
        catch (e) {
            return this._sendError(from, null, -32700, e);
        }
        if (request && request.method && typeof request.method === 'string') {
            if (request.id && typeof request.id === 'number') {
                const handler = this._exposedMethodsMap.get(request.method);
                if (handler) {
                    if (request.params && typeof request.params !== 'object') {
                        this._sendError(from, request, 32602, new Error('params is not an Array or Object'));
                    }
                    else {
                        try {
                            const result = request.params instanceof Array
                                ? handler.apply(this, request.params)
                                : handler.call(this, request.params);
                            if (isPromiseLike(result)) {
                                result
                                    .then((actualResult) => {
                                    this._send(from, {
                                        jsonrpc: '2.0',
                                        id: request.id,
                                        result: typeof actualResult === 'undefined' ? null : actualResult
                                    });
                                })
                                    .catch((error) => {
                                    this._sendError(from, request, -32603, error);
                                });
                            }
                            else {
                                this._send(from, {
                                    jsonrpc: '2.0',
                                    id: request.id,
                                    result: typeof result === 'undefined' ? null : result
                                });
                            }
                        }
                        catch (error) {
                            this._sendError(from, request, -32603, error);
                        }
                    }
                }
                else {
                    this._sendError(from, request, -32601);
                }
            }
            else {
                this.emit(request.method, request.params);
            }
        }
        else {
            this._sendError(from, request, -32600);
        }
    }
    _logMessage(messageStr, direction) {
        if (this._consoleLog) {
            const msg = typeof messageStr === 'object' && (messageStr instanceof Array || messageStr instanceof Uint8Array)
                ? Array.from(messageStr)
                    .map($ => String.fromCharCode($))
                    .join('')
                : messageStr.toString();
            console.log(`${direction === 'send' ? 'Server > Client' : 'Server < Client'}`, msg, typeof messageStr);
        }
    }
    _send(receiver, message) {
        let messageStr;
        if (this.sendEncoding === 'msgpack') {
            messageStr = encode(message, { codec });
        }
        else {
            messageStr = JSON.stringify(message);
        }
        this._logMessage(messageStr, 'send');
        this.sendMessage(receiver, messageStr);
    }
    _sendError(receiver, request, errorCode, error) {
        try {
            this._send(receiver, {
                jsonrpc: '2.0',
                id: (request && request.id) || -1,
                error: this._errorFromCode(errorCode, sanitizeError(error), request && request.method)
            });
        }
        catch (error) {
        }
    }
    _errorFromCode(code, data = null, method = null) {
        let message = '';
        switch (code) {
            case -32603:
                message = `InternalError: Internal Error when calling '${method}'`;
                break;
            case -32601:
                message = `MethodNotFound: '${method}' wasn't found`;
                break;
            case -32600:
                message = 'InvalidRequest: JSON sent is not a valid request object';
                break;
            case -32700:
                message = 'ParseError: invalid JSON received';
                break;
        }
        return { code, message, data };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbW1vbi9qc29uLXJwYy9TZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBSTFELE9BQU8sRUFBRSxlQUFlLEVBQTBCLE1BQU0seUJBQXlCLENBQUE7QUFDakYsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBRXJELE1BQU0sS0FBSyxHQUFHLFdBQVcsRUFBRSxDQUFBO0FBRTNCLE1BQU0sWUFBWSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsWUFBWSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQTtBQUVuRyxTQUFTLGFBQWEsQ0FBQyxLQUFVO0lBQy9CLElBQUksS0FBSyxZQUFZLEtBQUssRUFBRTtRQUMxQixNQUFNLEdBQUcsR0FBUSxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUV6QyxLQUFLLElBQUksQ0FBQyxJQUFJLFlBQVksRUFBRTtZQUMxQixHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUksS0FBYSxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQzNCO1FBRUQsT0FBTyxHQUFHLENBQUE7S0FDWDtTQUFNO1FBQ0wsT0FBTyxLQUFLLENBQUE7S0FDYjtBQUNILENBQUM7QUFNRCxNQUFNLE9BQWdCLE1BQXlCLFNBQVEsZUFBZTtJQVdwRSxZQUFZLE9BQTZCLEVBQUU7UUFDekMsS0FBSyxFQUFFLENBQUE7UUFYVCxpQkFBWSxHQUF1QixNQUFNLENBQUE7UUFFakMsdUJBQWtCLEdBQTZELElBQUksR0FBRyxFQUFFLENBQUE7UUFDeEYsZ0JBQVcsR0FB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QyxNQUFNLENBQUM7YUFDdkYsQ0FBQyxDQUFBO1NBQ0g7UUFBQyxPQUFPLEtBQUssRUFBRTtTQUVmO0lBQ0gsQ0FBQztJQUVPLGNBQWMsQ0FBQyxJQUF3QixFQUFFLE9BQVksSUFBSSxFQUFFLFNBQXdCLElBQUk7UUFDN0YsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFBO1FBRWhCLFFBQVEsSUFBSSxFQUFFO1lBQ1o7Z0JBQ0UsT0FBTyxHQUFHLCtDQUErQyxNQUFNLEdBQUcsQ0FBQTtnQkFDbEUsTUFBSztZQUNQO2dCQUNFLE9BQU8sR0FBRyxvQkFBb0IsTUFBTSxnQkFBZ0IsQ0FBQTtnQkFDcEQsTUFBSztZQUNQO2dCQUNFLE9BQU8sR0FBRyx5REFBeUQsQ0FBQTtnQkFDbkUsTUFBSztZQUNQO2dCQUNFLE9BQU8sR0FBRyxtQ0FBbUMsQ0FBQTtnQkFDN0MsTUFBSztTQUNSO1FBRUQsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUE7SUFDaEMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQ29kZWMsIGVuY29kZSwgZGVjb2RlIH0gZnJvbSAnbXNncGFjay1saXRlJ1xuXG5pbXBvcnQgKiBhcyBKc29uUnBjMiBmcm9tICcuL3R5cGVzJ1xuXG5pbXBvcnQgeyBFdmVudERpc3BhdGNoZXIsIEV2ZW50RGlzcGF0Y2hlckJpbmRpbmcgfSBmcm9tICcuLi9jb3JlL0V2ZW50RGlzcGF0Y2hlcidcbmltcG9ydCB7IGlzUHJvbWlzZUxpa2UgfSBmcm9tICcuLi9jb3JlL2lzUHJvbWlzZUxpa2UnXG5cbmNvbnN0IGNvZGVjID0gY3JlYXRlQ29kZWMoKVxuXG5jb25zdCBlcnJvckNvbHVtbnMgPSB7IG5hbWU6IDEsIG1lc3NhZ2U6IDEsIHN0YWNrOiAxLCBjb2x1bW5OdW1iZXI6IDEsIGZpbGVOYW1lOiAxLCBsaW5lTnVtYmVyOiAxIH1cblxuZnVuY3Rpb24gc2FuaXRpemVFcnJvcihlcnJvcjogYW55KSB7XG4gIGlmIChlcnJvciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgY29uc3QgcmV0OiBhbnkgPSBPYmplY3QuYXNzaWduKHt9LCBlcnJvcilcblxuICAgIGZvciAobGV0IGkgaW4gZXJyb3JDb2x1bW5zKSB7XG4gICAgICByZXRbaV0gPSAoZXJyb3IgYXMgYW55KVtpXVxuICAgIH1cblxuICAgIHJldHVybiByZXRcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXJyb3JcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSUEMgU2VydmVyLlxuICogSXQgaXMgaW50ZW50aW9uYWwgdGhhdCBTZXJ2ZXIgZG9lcyBub3QgY3JlYXRlIGEgV29ya2VyIG9iamVjdCBzaW5jZSB3ZSBwcmVmZXIgY29tcG9zYWJpbGl0eVxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgU2VydmVyPENsaWVudFR5cGUgPSBhbnk+IGV4dGVuZHMgRXZlbnREaXNwYXRjaGVyIGltcGxlbWVudHMgSnNvblJwYzIuSVNlcnZlciB7XG4gIHNlbmRFbmNvZGluZzogJ0pTT04nIHwgJ21zZ3BhY2snID0gJ0pTT04nXG5cbiAgcHJpdmF0ZSBfZXhwb3NlZE1ldGhvZHNNYXA6IE1hcDxzdHJpbmcsIChwYXJhbXM6IGFueSkgPT4gSnNvblJwYzIuUHJvbWlzZU9yTm90PGFueT4+ID0gbmV3IE1hcCgpXG4gIHByaXZhdGUgX2NvbnNvbGVMb2c6IGJvb2xlYW4gPSBmYWxzZVxuICBwcml2YXRlIF9pc0VuYWJsZWQgPSBmYWxzZVxuXG4gIGdldCBpc0VuYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX2lzRW5hYmxlZFxuICB9XG5cbiAgY29uc3RydWN0b3Iob3B0czogSnNvblJwYzIuSVNlcnZlck9wdHMgPSB7fSkge1xuICAgIHN1cGVyKClcbiAgICB0aGlzLnNldExvZ2dpbmcob3B0cylcbiAgfVxuXG4gIGFic3RyYWN0IHNlbmRNZXNzYWdlKHRvOiBDbGllbnRUeXBlLCBtZXNzYWdlOiBzdHJpbmcgfCBCdWZmZXIpOiB2b2lkXG4gIGFic3RyYWN0IGdldEFsbENsaWVudHMoKTogSXRlcmFibGU8Q2xpZW50VHlwZT5cblxuICBvbihtZXRob2Q6ICdlcnJvcicsIGNhbGxiYWNrOiAoZXJyb3I6IGFueSkgPT4gdm9pZCwgb25jZT86IGJvb2xlYW4pOiBFdmVudERpc3BhdGNoZXJCaW5kaW5nXG4gIG9uKG1ldGhvZDogc3RyaW5nLCBjYWxsYmFjazogKHBhcmFtczogYW55LCBzZW5kZXI6IENsaWVudFR5cGUpID0+IHZvaWQsIG9uY2U/OiBib29sZWFuKTogRXZlbnREaXNwYXRjaGVyQmluZGluZ1xuICBvbihtZXRob2Q6IHN0cmluZywgY2FsbGJhY2s6IChwYXJhbXM6IGFueSwgc2VuZGVyOiBDbGllbnRUeXBlKSA9PiB2b2lkLCBvbmNlPzogYm9vbGVhbik6IEV2ZW50RGlzcGF0Y2hlckJpbmRpbmcge1xuICAgIHJldHVybiBzdXBlci5vbihtZXRob2QsIGNhbGxiYWNrLCBvbmNlKVxuICB9XG5cbiAgb25jZShtZXRob2Q6ICdlcnJvcicsIGNhbGxiYWNrOiAoZXJyb3I6IGFueSkgPT4gdm9pZCk6IEV2ZW50RGlzcGF0Y2hlckJpbmRpbmdcbiAgb25jZShtZXRob2Q6IHN0cmluZywgY2FsbGJhY2s6IChwYXJhbXM6IGFueSwgc2VuZGVyOiBDbGllbnRUeXBlKSA9PiB2b2lkKTogRXZlbnREaXNwYXRjaGVyQmluZGluZ1xuICBvbmNlKG1ldGhvZDogc3RyaW5nLCBjYWxsYmFjazogKHBhcmFtczogYW55LCBzZW5kZXI6IENsaWVudFR5cGUpID0+IHZvaWQpOiBFdmVudERpc3BhdGNoZXJCaW5kaW5nIHtcbiAgICByZXR1cm4gc3VwZXIub25jZShtZXRob2QsIGNhbGxiYWNrKVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBsb2dnaW5nIGZvciBhbGwgcmVjZWl2ZWQgYW5kIHNlbnQgbWVzc2FnZXNcbiAgICovXG4gIHB1YmxpYyBzZXRMb2dnaW5nKHsgbG9nQ29uc29sZSB9OiBKc29uUnBjMi5JTG9nT3B0cyA9IHt9KSB7XG4gICAgdGhpcy5fY29uc29sZUxvZyA9ICEhbG9nQ29uc29sZVxuICB9XG5cbiAgZXhwb3NlKG1ldGhvZDogc3RyaW5nLCBoYW5kbGVyOiAoLi4ucGFyYW1zOiBhbnlbXSkgPT4gUHJvbWlzZTxhbnk+KTogdm9pZCB7XG4gICAgdGhpcy5fZXhwb3NlZE1ldGhvZHNNYXAuc2V0KG1ldGhvZCwgaGFuZGxlcilcbiAgfVxuXG4gIG5vdGlmeShtZXRob2Q6IHN0cmluZyk6IHZvaWRcbiAgbm90aWZ5KG1ldGhvZDogc3RyaW5nLCBwYXJhbXM6IHN0cmluZyk6IG5ldmVyXG4gIG5vdGlmeShtZXRob2Q6IHN0cmluZywgcGFyYW1zOiBudW1iZXIpOiBuZXZlclxuICBub3RpZnkobWV0aG9kOiBzdHJpbmcsIHBhcmFtczogYm9vbGVhbik6IG5ldmVyXG4gIG5vdGlmeShtZXRob2Q6IHN0cmluZywgcGFyYW1zOiBudWxsKTogbmV2ZXJcbiAgbm90aWZ5PFQ+KG1ldGhvZDogc3RyaW5nLCBwYXJhbXM6IEl0ZXJhYmxlPFQ+KTogdm9pZFxuICBub3RpZnkobWV0aG9kOiBzdHJpbmcsIHBhcmFtcz86IE9iamVjdCk6IHZvaWRcbiAgbm90aWZ5KG1ldGhvZDogc3RyaW5nLCBwYXJhbXM/OiBhbnkpOiB2b2lkIHtcbiAgICBpZiAodHlwZW9mIHBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHBhcmFtcyAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU2VydmVyI25vdGlmeSBQYXJhbXMgbXVzdCBiZSBzdHJ1Y3R1cmVkIGRhdGEgKEFycmF5IHwgT2JqZWN0KSBnb3QgJHtKU09OLnN0cmluZ2lmeShwYXJhbXMpfWApXG4gICAgfVxuICAgIC8vIEJyb2FkY2FzdCBtZXNzYWdlIHRvIGFsbCBjbGllbnRzXG4gICAgY29uc3QgY2xpZW50cyA9IHRoaXMuZ2V0QWxsQ2xpZW50cygpXG5cbiAgICBpZiAoY2xpZW50cykge1xuICAgICAgZm9yIChsZXQgY2xpZW50IG9mIGNsaWVudHMpIHtcbiAgICAgICAgdGhpcy5fc2VuZChjbGllbnQsIHsgbWV0aG9kLCBwYXJhbXMsIGpzb25ycGM6ICcyLjAnIH0pXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU2VydmVyIGRvZXMgbm90IHN1cHBvcnQgYnJvYWRjYXN0aW5nLiBObyBcImdldEFsbENsaWVudHM6IENsaWVudFR5cGVbXVwiIHJldHVybmVkIG51bGwnKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlIHRoaXMgbWV0aG9kIGFmdGVyIGNvbmZpZ3VyaW5nIHRoZSBSUEMgbWV0aG9kcyBhbmQgbGlzdGVuZXJzLlxuICAgKiBJdCB3aWxsIHNlbmQgYW4gZW1wdHkgbm90aWZpY2F0aW9uIHRvIHRoZSBjbGllbnQsIHRoZW4gaXQgKHRoZSBjbGllbnQpIHdpbGwgc2VuZCBhbGwgdGhlIGVucXVldWVkIG1lc3NhZ2VzLlxuICAgKi9cbiAgcHJvdGVjdGVkIGVuYWJsZSgpIHtcbiAgICBpZiAoIXRoaXMuX2lzRW5hYmxlZCkge1xuICAgICAgdGhpcy5faXNFbmFibGVkID0gdHJ1ZVxuICAgICAgdGhpcy5ub3RpZnkoJ1JQQy5FbmFibGVkJylcbiAgICB9XG4gIH1cblxuICBwcm90ZWN0ZWQgZGlzYWJsZSgpIHtcbiAgICBpZiAodGhpcy5faXNFbmFibGVkKSB7XG4gICAgICB0aGlzLl9pc0VuYWJsZWQgPSBmYWxzZVxuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBwcm9jZXNzTWVzc2FnZShmcm9tOiBDbGllbnRUeXBlLCBtZXNzYWdlU3RyOiBzdHJpbmcgfCBCdWZmZXIgfCBVaW50OEFycmF5IHwgbnVtYmVyW10pOiB2b2lkIHtcbiAgICB0aGlzLl9sb2dNZXNzYWdlKG1lc3NhZ2VTdHIsICdyZWNlaXZlJylcbiAgICBsZXQgcmVxdWVzdDogSnNvblJwYzIuSVJlcXVlc3RcblxuICAgIHRyeSB7XG4gICAgICBpZiAodHlwZW9mIG1lc3NhZ2VTdHIgPT09ICdzdHJpbmcnICYmIG1lc3NhZ2VTdHIuY2hhckF0KDApID09PSAneycpIHtcbiAgICAgICAgLy8gRW5zdXJlIEpTT04gaXMgbm90IG1hbGZvcm1lZFxuICAgICAgICByZXF1ZXN0ID0gSlNPTi5wYXJzZShtZXNzYWdlU3RyKVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbWVzc2FnZVN0ciA9PT0gJ3N0cmluZycgfHwgbWVzc2FnZVN0ciBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgfHwgbWVzc2FnZVN0ciBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHJlcXVlc3QgPSBkZWNvZGUobWVzc2FnZVN0ciBhcyBhbnksIHsgY29kZWMgfSlcbiAgICAgICAgdGhpcy5zZW5kRW5jb2RpbmcgPSAnbXNncGFjaydcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIHBhcnNlIG1lc3NhZ2UgJHtKU09OLnN0cmluZ2lmeShtZXNzYWdlU3RyKX1gKVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9zZW5kRXJyb3IoZnJvbSwgbnVsbCwgSnNvblJwYzIuRXJyb3JDb2RlLlBhcnNlRXJyb3IsIGUpXG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIG1ldGhvZCBpcyBhdGxlYXN0IGRlZmluZWRcbiAgICBpZiAocmVxdWVzdCAmJiByZXF1ZXN0Lm1ldGhvZCAmJiB0eXBlb2YgKHJlcXVlc3QubWV0aG9kIGFzIGFueSkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBpZiAocmVxdWVzdC5pZCAmJiB0eXBlb2YgKHJlcXVlc3QuaWQgYXMgYW55KSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgY29uc3QgaGFuZGxlciA9IHRoaXMuX2V4cG9zZWRNZXRob2RzTWFwLmdldChyZXF1ZXN0Lm1ldGhvZClcbiAgICAgICAgLy8gSGFuZGxlciBpcyBkZWZpbmVkIHNvIGxldHMgY2FsbCBpdFxuICAgICAgICBpZiAoaGFuZGxlcikge1xuICAgICAgICAgIGlmIChyZXF1ZXN0LnBhcmFtcyAmJiB0eXBlb2YgcmVxdWVzdC5wYXJhbXMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0aGlzLl9zZW5kRXJyb3IoXG4gICAgICAgICAgICAgIGZyb20sXG4gICAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgICAgICAgIEpzb25ScGMyLkVycm9yQ29kZS5JbnZhbGlkUGFyYW1zLFxuICAgICAgICAgICAgICBuZXcgRXJyb3IoJ3BhcmFtcyBpcyBub3QgYW4gQXJyYXkgb3IgT2JqZWN0JylcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgY29uc3QgcmVzdWx0OiBKc29uUnBjMi5Qcm9taXNlT3JOb3Q8YW55PiA9XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5wYXJhbXMgaW5zdGFuY2VvZiBBcnJheVxuICAgICAgICAgICAgICAgICAgPyBoYW5kbGVyLmFwcGx5KHRoaXMsIHJlcXVlc3QucGFyYW1zKVxuICAgICAgICAgICAgICAgICAgOiBoYW5kbGVyLmNhbGwodGhpcywgcmVxdWVzdC5wYXJhbXMpXG5cbiAgICAgICAgICAgICAgaWYgKGlzUHJvbWlzZUxpa2UocmVzdWx0KSkge1xuICAgICAgICAgICAgICAgIC8vIFJlc3VsdCBpcyBhIHByb21pc2UsIHNvIGxldHMgd2FpdCBmb3IgdGhlIHJlc3VsdCBhbmQgaGFuZGxlIGFjY29yZGluZ2x5XG4gICAgICAgICAgICAgICAgcmVzdWx0XG4gICAgICAgICAgICAgICAgICAudGhlbigoYWN0dWFsUmVzdWx0OiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VuZChmcm9tLCB7XG4gICAgICAgICAgICAgICAgICAgICAganNvbnJwYzogJzIuMCcsXG4gICAgICAgICAgICAgICAgICAgICAgaWQ6IHJlcXVlc3QuaWQsXG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiB0eXBlb2YgYWN0dWFsUmVzdWx0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiBhY3R1YWxSZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yOiBFcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZW5kRXJyb3IoZnJvbSwgcmVxdWVzdCwgSnNvblJwYzIuRXJyb3JDb2RlLkludGVybmFsRXJyb3IsIGVycm9yKVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBSZXN1bHQgaXMgbm90IGEgcHJvbWlzZSBzbyBzZW5kIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICAgICAgdGhpcy5fc2VuZChmcm9tLCB7XG4gICAgICAgICAgICAgICAgICBqc29ucnBjOiAnMi4wJyxcbiAgICAgICAgICAgICAgICAgIGlkOiByZXF1ZXN0LmlkLFxuICAgICAgICAgICAgICAgICAgcmVzdWx0OiB0eXBlb2YgcmVzdWx0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXN1bHRcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICB0aGlzLl9zZW5kRXJyb3IoZnJvbSwgcmVxdWVzdCwgSnNvblJwYzIuRXJyb3JDb2RlLkludGVybmFsRXJyb3IsIGVycm9yKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLl9zZW5kRXJyb3IoZnJvbSwgcmVxdWVzdCwgSnNvblJwYzIuRXJyb3JDb2RlLk1ldGhvZE5vdEZvdW5kKVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNZXNzYWdlIGlzIGEgbm90aWZpY2F0aW9uLCBzbyBqdXN0IGVtaXRcbiAgICAgICAgdGhpcy5lbWl0KHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnBhcmFtcylcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTm8gbWV0aG9kIHByb3BlcnR5LCBzZW5kIEludmFsaWRSZXF1ZXN0IGVycm9yXG4gICAgICB0aGlzLl9zZW5kRXJyb3IoZnJvbSwgcmVxdWVzdCwgSnNvblJwYzIuRXJyb3JDb2RlLkludmFsaWRSZXF1ZXN0KVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2xvZ01lc3NhZ2UobWVzc2FnZVN0cjogc3RyaW5nIHwgQnVmZmVyIHwgVWludDhBcnJheSB8IG51bWJlcltdLCBkaXJlY3Rpb246ICdzZW5kJyB8ICdyZWNlaXZlJykge1xuICAgIGlmICh0aGlzLl9jb25zb2xlTG9nKSB7XG4gICAgICBjb25zdCBtc2cgPVxuICAgICAgICB0eXBlb2YgbWVzc2FnZVN0ciA9PT0gJ29iamVjdCcgJiYgKG1lc3NhZ2VTdHIgaW5zdGFuY2VvZiBBcnJheSB8fCBtZXNzYWdlU3RyIGluc3RhbmNlb2YgVWludDhBcnJheSlcbiAgICAgICAgICA/IEFycmF5LmZyb20obWVzc2FnZVN0cilcbiAgICAgICAgICAgICAgLm1hcCgkID0+IFN0cmluZy5mcm9tQ2hhckNvZGUoJCkpXG4gICAgICAgICAgICAgIC5qb2luKCcnKVxuICAgICAgICAgIDogbWVzc2FnZVN0ci50b1N0cmluZygpXG5cbiAgICAgIGNvbnNvbGUubG9nKGAke2RpcmVjdGlvbiA9PT0gJ3NlbmQnID8gJ1NlcnZlciA+IENsaWVudCcgOiAnU2VydmVyIDwgQ2xpZW50J31gLCBtc2csIHR5cGVvZiBtZXNzYWdlU3RyKVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX3NlbmQocmVjZWl2ZXI6IENsaWVudFR5cGUsIG1lc3NhZ2U6IEpzb25ScGMyLklSZXNwb25zZSB8IEpzb25ScGMyLklOb3RpZmljYXRpb24pIHtcbiAgICBsZXQgbWVzc2FnZVN0cjogc3RyaW5nIHwgQnVmZmVyXG5cbiAgICBpZiAodGhpcy5zZW5kRW5jb2RpbmcgPT09ICdtc2dwYWNrJykge1xuICAgICAgbWVzc2FnZVN0ciA9IGVuY29kZShtZXNzYWdlLCB7IGNvZGVjIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgIG1lc3NhZ2VTdHIgPSBKU09OLnN0cmluZ2lmeShtZXNzYWdlKVxuICAgIH1cblxuICAgIHRoaXMuX2xvZ01lc3NhZ2UobWVzc2FnZVN0ciwgJ3NlbmQnKVxuICAgIHRoaXMuc2VuZE1lc3NhZ2UocmVjZWl2ZXIsIG1lc3NhZ2VTdHIpXG4gIH1cblxuICBwcml2YXRlIF9zZW5kRXJyb3IoXG4gICAgcmVjZWl2ZXI6IENsaWVudFR5cGUsXG4gICAgcmVxdWVzdDogSnNvblJwYzIuSVJlcXVlc3QgfCBudWxsLFxuICAgIGVycm9yQ29kZTogSnNvblJwYzIuRXJyb3JDb2RlLFxuICAgIGVycm9yPzogRXJyb3JcbiAgKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuX3NlbmQocmVjZWl2ZXIsIHtcbiAgICAgICAganNvbnJwYzogJzIuMCcsXG4gICAgICAgIGlkOiAocmVxdWVzdCAmJiByZXF1ZXN0LmlkKSB8fCAtMSxcbiAgICAgICAgZXJyb3I6IHRoaXMuX2Vycm9yRnJvbUNvZGUoZXJyb3JDb2RlLCBzYW5pdGl6ZUVycm9yKGVycm9yKSwgcmVxdWVzdCAmJiByZXF1ZXN0Lm1ldGhvZClcbiAgICAgIH0pXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIFNpbmNlIHdlIGNhbid0IGV2ZW4gc2VuZCBlcnJvcnMsIGRvIG5vdGhpbmcuIFRoZSBjb25uZWN0aW9uIHdhcyBwcm9iYWJseSBjbG9zZWQuXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfZXJyb3JGcm9tQ29kZShjb2RlOiBKc29uUnBjMi5FcnJvckNvZGUsIGRhdGE6IGFueSA9IG51bGwsIG1ldGhvZDogc3RyaW5nIHwgbnVsbCA9IG51bGwpOiBKc29uUnBjMi5JRXJyb3Ige1xuICAgIGxldCBtZXNzYWdlID0gJydcblxuICAgIHN3aXRjaCAoY29kZSkge1xuICAgICAgY2FzZSBKc29uUnBjMi5FcnJvckNvZGUuSW50ZXJuYWxFcnJvcjpcbiAgICAgICAgbWVzc2FnZSA9IGBJbnRlcm5hbEVycm9yOiBJbnRlcm5hbCBFcnJvciB3aGVuIGNhbGxpbmcgJyR7bWV0aG9kfSdgXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlIEpzb25ScGMyLkVycm9yQ29kZS5NZXRob2ROb3RGb3VuZDpcbiAgICAgICAgbWVzc2FnZSA9IGBNZXRob2ROb3RGb3VuZDogJyR7bWV0aG9kfScgd2Fzbid0IGZvdW5kYFxuICAgICAgICBicmVha1xuICAgICAgY2FzZSBKc29uUnBjMi5FcnJvckNvZGUuSW52YWxpZFJlcXVlc3Q6XG4gICAgICAgIG1lc3NhZ2UgPSAnSW52YWxpZFJlcXVlc3Q6IEpTT04gc2VudCBpcyBub3QgYSB2YWxpZCByZXF1ZXN0IG9iamVjdCdcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgSnNvblJwYzIuRXJyb3JDb2RlLlBhcnNlRXJyb3I6XG4gICAgICAgIG1lc3NhZ2UgPSAnUGFyc2VFcnJvcjogaW52YWxpZCBKU09OIHJlY2VpdmVkJ1xuICAgICAgICBicmVha1xuICAgIH1cblxuICAgIHJldHVybiB7IGNvZGUsIG1lc3NhZ2UsIGRhdGEgfVxuICB9XG59XG4iXX0=