import { EventDispatcher } from '../core/EventDispatcher';
import { createCodec, encode, decode } from 'msgpack-lite';
const codec = createCodec();
export class Client extends EventDispatcher {
    constructor(opts) {
        super();
        this.sendEncoding = 'JSON';
        this._responsePromiseMap = new Map();
        this._nextMessageId = 0;
        this._consoleLog = false;
        this._requestQueue = [];
        this._connected = false;
        this.setLogging(opts);
    }
    processMessage(messageStr) {
        let message;
        if (typeof messageStr === 'string' && messageStr.charAt(0) === '{') {
            this._logMessage(messageStr, 'receive');
            try {
                message = JSON.parse(messageStr);
            }
            catch (e) {
                return this.emit('error', e);
            }
        }
        else if (typeof messageStr === 'string' ||
            messageStr instanceof Uint8Array ||
            (typeof Buffer !== 'undefined' && messageStr instanceof Buffer) ||
            messageStr instanceof Array) {
            message = decode(messageStr, { codec });
        }
        else {
            message = messageStr;
        }
        if (!message) {
            this.emit('error', new Error(`Message cannot be null, empty or undefined`));
        }
        else if (message.id) {
            if (this._responsePromiseMap.has(message.id)) {
                const promise = this._responsePromiseMap.get(message.id);
                this._responsePromiseMap.delete(message.id);
                if ('result' in message) {
                    promise.resolve(message.result);
                }
                else if ('error' in message) {
                    const error = Object.assign(new Error('Remote error'), message.error, (message.error && message.error.data) || {});
                    promise.reject(error);
                }
                else {
                    promise.reject(Object.assign(new Error(`Response must have result or error: ${messageStr}`), {
                        code: -32700
                    }));
                }
            }
            else {
                this.emit('error', new Error(`Response with id:${message.id} has no pending request`));
            }
        }
        else if (message.method) {
            this.emit(message.method, message.params);
        }
        else {
            this.emit('error', new Error(`Invalid message: ${messageStr}`));
        }
    }
    setLogging({ logConsole } = {}) {
        this._consoleLog = !!logConsole;
    }
    call(method, params) {
        if (typeof params !== 'undefined' && typeof params !== 'object') {
            throw new Error(`Client#call Params must be structured data (Array | Object) got ${JSON.stringify(params)}`);
        }
        const id = ++this._nextMessageId;
        const message = { id, method, params, jsonrpc: '2.0' };
        return new Promise((resolve, reject) => {
            try {
                this._responsePromiseMap.set(id, { resolve, reject });
                this._send(message);
            }
            catch (error) {
                return reject(error);
            }
        });
    }
    notify(method, params) {
        if (typeof params !== 'undefined' && typeof params !== 'object') {
            throw new Error(`Client#notify Params must be structured data (Array | Object) got ${JSON.stringify(params)}`);
        }
        this._send({ method, params, jsonrpc: '2.0' });
    }
    didConnect() {
        if (this._connected === false) {
            this._connected = true;
            this._sendQueuedRequests();
        }
    }
    _send(message) {
        if (this.sendEncoding === 'msgpack') {
            this._requestQueue.push(encode(message, { codec }));
        }
        else {
            this._requestQueue.push(JSON.stringify(message));
        }
        this._sendQueuedRequests();
    }
    _sendQueuedRequests() {
        if (this._connected) {
            const queue = this._requestQueue.splice(0, this._requestQueue.length);
            for (let messageStr of queue) {
                this._logMessage(messageStr, 'send');
                this.sendMessage(messageStr);
            }
        }
    }
    _logMessage(message, direction) {
        if (this._consoleLog) {
            console.log(`Client ${direction === 'send' ? '>' : '<'}`, message.toString());
        }
    }
}
//# sourceMappingURL=data:application/json;base64,