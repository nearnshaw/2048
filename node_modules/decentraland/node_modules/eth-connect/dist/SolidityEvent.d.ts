import { RequestManager } from './RequestManager';
import { Contract } from './Contract';
import { EthFilter } from './Filter';
import { FilterOptions } from './Schema';
/**
 * This prototype should be used to create event filters
 */
export declare class SolidityEvent {
    requestManager: RequestManager;
    address: string;
    _anonymous: boolean;
    _name: string;
    _params: any[];
    constructor(requestManager: RequestManager, json: {
        inputs: any[];
        anonymous;
        name: string;
    }, address: string);
    /**
     * Should be used to get filtered param types
     *
     * @method types
     * @param {Bool} decide if returned typed should be indexed
     * @return {Array} array of types
     */
    types(indexed: any): any[];
    /**
     * Should be used to get event display name
     *
     * @method displayName
     * @return {string} event display name
     */
    displayName(): string;
    /**
     * Should be used to get event type name
     *
     * @method typeName
     * @return {string} event type name
     */
    typeName(): string;
    /**
     * Should be used to get event signature
     *
     * @method signature
     * @return {string} event signature
     */
    signature(): any;
    /**
     * Should be used to encode indexed params and options to one final object
     *
     * @method encode
     * @param {object} indexed
     * @param {object} options
     * @return {object} everything combined together and encoded
     */
    encode(indexed?: {}, options?: FilterOptions): {
        topics: any[];
        address: string;
    };
    /**
     * Should be used to decode indexed params and options
     *
     * @method decode
     * @param {object} data
     * @return {object} result object with decoded indexed && not indexed params
     */
    decode(data: {
        data: string;
        topics?: string[];
        address: string;
    }): any;
    /**
     * Should be used to create new filter object from event
     *
     * @method execute
     * @param {object} indexed
     * @param {object} options
     * @return {object} filter object
     */
    execute(indexed: any, options: FilterOptions): Promise<EthFilter<string | {
        removed: boolean;
        logIndex: number;
        transactionIndex: number;
        transactionHash: string;
        blockHash: string;
        blockNumber: number;
        address: string;
        data: string;
        topics: string[];
    }>>;
    /**
     * Should be used to attach event to contract object
     *
     * @method attachToContract
     * @param {Contract}
     */
    attachToContract(contract: Contract): void;
}
