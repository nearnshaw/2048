import { BigNumber } from 'bignumber.js';
export declare function sha3(value: string, options?: {
    encoding?: 'hex';
}): any;
/**
 * Should be called to pad string to expected length
 *
 * @method padLeft
 * @param {string} str to be padded
 * @param {number} characters that result string should have
 * @param {string} sign, by default 0
 * @returns {string} right aligned string
 */
export declare function padLeft(str: string, chars: number, sign?: string): string;
/**
 * Should be called to pad string to expected length
 *
 * @method padRight
 * @param {string} str to be padded
 * @param {number} characters that result string should have
 * @param {string} sign, by default 0
 * @returns {string} right aligned string
 */
export declare function padRight(str: string, chars: number, sign?: string): string;
/**
 * Should be called to get utf8 from it's hex representation
 *
 * @method toUtf8
 * @param {string} string in hex
 * @returns {string} ascii string representation of hex value
 */
export declare function toUtf8(hex: string): any;
/**
 * Should be called to get ascii from it's hex representation
 *
 * @method toAscii
 * @param {string} string in hex
 * @returns {string} ascii string representation of hex value
 */
export declare function toAscii(hex: string): string;
/**
 * Should be called to get hex representation (prefixed by 0x) of utf8 string
 *
 * @method fromUtf8
 * @param {string} string
 * @param {Boolean} allowZero to convert code point zero to 00 instead of end of string
 * @returns {string} hex representation of input string
 */
export declare function fromUtf8(_str: string, allowZero?: boolean): string;
/**
 * Should be called to get hex representation (prefixed by 0x) of ascii string
 *
 * @method fromAscii
 * @param {string} string
 * @param {number} optional padding
 * @returns {string} hex representation of input string
 */
export declare function fromAscii(str: string, num?: number): string;
/**
 * Should be used to create full function/event name from json abi
 *
 * @method transformToFullName
 * @param {object} json-abi
 * @return {string} full fnction/event name
 */
export declare function transformToFullName(json: {
    name: string;
    inputs: any[];
}): string;
/**
 * Should be called to get display name of contract function
 *
 * @method extractDisplayName
 * @param {string} name of function/event
 * @returns {string} display name for function/event eg. multiply(uint256) -> multiply
 */
export declare function extractDisplayName(name: string): string;
/**
 * Should be called to get type name of contract function
 *
 * @method extractTypeName
 * @param {string} name of function/event
 * @returns {string} type name for function/event eg. multiply(uint256) -> uint256
 */
export declare function extractTypeName(name: string): string;
/**
 * Converts value to it's decimal representation in string
 *
 * @method toDecimal
 * @param {string|number|BigNumber}
 * @return {string}
 */
export declare function isHex(value: string): boolean;
/**
 * Converts value to it's decimal representation in string
 *
 * @method toDecimal
 * @param {string|number|BigNumber}
 * @return {string}
 */
export declare function toNullDecimal(value: number | string | BigNumber): BigNumber.Value;
/**
 * Converts value to it's decimal representation in string
 *
 * @method toDecimal
 * @param {string|number|BigNumber}
 * @return {string}
 */
export declare function toDecimal(value: number | string | BigNumber): number;
/**
 * Converts value to it's hex  representation in string
 */
export declare function toData(val: string | number | BigNumber): string;
/**
 * Converts value to it's boolean representation (x != 0)
 *
 * @method toBoolean
 * @param {string|number|BigNumber}
 * @return {string}
 */
export declare function toBoolean(value: number | string | BigNumber | boolean): boolean;
/**
 * Converts value to it's hex representation
 *
 * @method fromDecimal
 * @param {string|number|BigNumber}
 * @return {string}
 */
export declare function fromDecimal(value: string | number | BigNumber): string;
/**
 * Auto converts any given value into it's hex representation.
 *
 * And even stringifys objects before.
 *
 * @method toHex
 * @param {string|number|BigNumber|Object}
 * @return {string}
 */
export declare function toHex(val: string | number | BigNumber): string;
/**
 * Returns value of unit in Wei
 *
 * @method getValueOfUnit
 * @param {string} unit the unit to convert to, default ether
 * @returns {BigNumber} value of the unit (in Wei)
 * @throws error if the unit is not correct:w
 */
export declare function getValueOfUnit(_unit: string): BigNumber;
/**
 * Takes a number of wei and converts it to any other ether unit.
 *
 * Possible units are:
 *   SI Short   SI Full        Effigy       Other
 * - kwei       femtoether     babbage
 * - mwei       picoether      lovelace
 * - gwei       nanoether      shannon      nano
 * - --         microether     szabo        micro
 * - --         milliether     finney       milli
 * - ether      --             --
 * - kether                    --           grand
 * - mether
 * - gether
 * - tether
 *
 * @method fromWei
 * @param {Number|String} num can be a number, number string or a HEX of a decimal
 * @param {string} unit the unit to convert to, default ether
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number
 */
export declare function fromWei(num: number | string, unit: string): string | BigNumber;
/**
 * Takes a number of a unit and converts it to wei.
 *
 * Possible units are:
 *   SI Short   SI Full        Effigy       Other
 * - kwei       femtoether     babbage
 * - mwei       picoether      lovelace
 * - gwei       nanoether      shannon      nano
 * - --         microether     szabo        micro
 * - --         milliether     finney       milli
 * - ether      --             --
 * - kether                    --           grand
 * - mether
 * - gether
 * - tether
 *
 * @method toWei
 * @param {Number|String|BigNumber} num can be a number, number string or a HEX of a decimal
 * @param {string} unit the unit to convert from, default ether
 * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number
 */
export declare function toWei(num: number | string, unit: string): string | BigNumber;
/**
 * Takes an input and transforms it into an bignumber
 *
 * @method toBigNumber
 * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber
 * @return {BigNumber} BigNumber
 */
export declare function toBigNumber(_num: number | string | BigNumber): BigNumber;
/**
 * Takes and input transforms it into bignumber and if it is negative value, into two's complement
 *
 * @method toTwosComplement
 * @param {Number|String|BigNumber}
 * @return {BigNumber}
 */
export declare function toTwosComplement(num: number | string | BigNumber): BigNumber;
/**
 * Checks if the given string is strictly an address
 *
 * @method isStrictAddress
 * @param {string} address the given HEX adress
 * @return {Boolean}
 */
export declare function isStrictAddress(address: any): boolean;
/**
 * Checks if the given string is an address
 *
 * @method isAddress
 * @param {string} address the given HEX adress
 * @return {Boolean}
 */
export declare function isAddress(address: any): boolean;
/**
 * Checks if the given string is a checksummed address
 *
 * @method isChecksumAddress
 * @param {string} address the given HEX adress
 * @return {Boolean}
 */
export declare function isChecksumAddress(_address: string): boolean;
/**
 * Makes a checksum address
 *
 * @method toChecksumAddress
 * @param {string} address the given HEX adress
 * @return {string}
 */
export declare function toChecksumAddress(_address: string): string;
/**
 * Transforms given string to valid 20 bytes-length addres with 0x prefix
 *
 * @method toAddress
 * @param {string} address
 * @return {string} formatted address
 */
export declare function toAddress(address: any): any;
/**
 * Returns true if object is BigNumber, otherwise false
 *
 * @method isBigNumber
 * @param {object}
 * @return {Boolean}
 */
export declare function isBigNumber(object: any): boolean;
/**
 * Returns true if object is string, otherwise false
 *
 * @method isString
 * @param {object}
 * @return {Boolean}
 */
export declare function isString(object: string): true;
export declare function isString(object: any): false;
/**
 * Returns true if object is function, otherwise false
 *
 * @method isFunction
 * @param {object}
 * @return {Boolean}
 */
export declare function isFunction(object: any): boolean;
/**
 * Returns true if object is Objet, otherwise false
 *
 * @method isObject
 * @param {object}
 * @return {Boolean}
 */
export declare function isObject(object: any): boolean;
/**
 * Returns true if object is boolean, otherwise false
 *
 * @method isBoolean
 * @param {object}
 * @return {Boolean}
 */
export declare function isBoolean(object: any): boolean;
/**
 * Returns true if object is array, otherwise false
 *
 * @method isArray
 * @param {object}
 * @return {Boolean}
 */
export declare function isArray(object: any): boolean;
/**
 * Returns true if given string is valid json object
 *
 * @method isJson
 * @param {string}
 * @return {Boolean}
 */
export declare function isJson(str: any): boolean;
/**
 * Returns true if given string is a valid Ethereum block header bloom.
 *
 * @method isBloom
 * @param {string} hex encoded bloom filter
 * @return {Boolean}
 */
export declare function isBloom(bloom: any): boolean;
/**
 * Returns true if given string is a valid log topic.
 *
 * @method isTopic
 * @param {string} hex encoded topic
 * @return {Boolean}
 */
export declare function isTopic(topic: any): boolean;
