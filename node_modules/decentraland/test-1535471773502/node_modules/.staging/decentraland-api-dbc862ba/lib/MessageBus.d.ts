import { EventDispatcher } from 'decentraland-rpc/lib/common/core/EventDispatcher';
import { ScriptableScene } from '.';
export interface IMessage {
    event: string;
    args: any[];
    sender: string;
}
/**
 * MessageBusClient provides an easy way to send and reveive peer to peer
 * messages thru the communications interface of Decentraland.
 *
 * The usage is simple, it implements a pub-sub pattern that shares messages
 * using the connection that already exists between peers.
 *
 * @example inside your ScriptableScene
 * ```ts
 *   let messageBusClient = await MessageBusClient.acquireEstateChannel(this)
 *   messageBusClient.on('a message name', (message) => {...})
 *   messageBusClient.emit('a message name', message)
 * ```
 */
export declare class MessageBusClient<T = any> extends EventDispatcher<T> {
    protected api: any;
    protected id: string;
    protected busClientId: string;
    private constructor();
    static acquireEstateChannel(system: ScriptableScene): Promise<MessageBusClient<any>>;
    emit(event: string, ...args: any[]): void;
}
