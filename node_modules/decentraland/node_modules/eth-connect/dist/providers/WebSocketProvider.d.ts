import { Callback, RPCMessage } from './common';
import { IFuture } from '../utils/future';
export declare type WebSocketProviderOptions = {
    /**
     * WebSocketConstructor, used in Node.js where WebSocket is not globally available
     */
    WebSocketConstructor?: any;
    timeout?: number;
    protocol?: string;
};
export declare class WebSocketProvider {
    url: string;
    options: WebSocketProviderOptions;
    isDisposed: boolean;
    responseCallbacks: Map<number, IFuture<any>>;
    notificationCallbacks: Set<Callback>;
    connection: IFuture<WebSocket>;
    debug: boolean;
    private lastChunk;
    private lastChunkTimeout;
    constructor(url: string, options?: WebSocketProviderOptions);
    dispose(): void;
    send(): void;
    sendAsync(payload: RPCMessage | RPCMessage[], callback: Callback): void;
    /**
     * Will parse the response and make an array out of it.
     * @method _parseResponse
     * @param {String} data
     */
    private parseResponse(data);
    private processMessage(message);
    /**
     * Timeout all requests when the end/error event is fired
     * @method _timeout
     */
    private timeout();
    private connect();
}
export default WebSocketProvider;
