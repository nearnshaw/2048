import { RequestManager } from './RequestManager';
/**
 * This prototype should be used to call/sendTransaction to solidity functions
 */
export declare class SolidityFunction {
    requestManager: RequestManager;
    json: any;
    _address: string;
    _inputTypes: string[];
    _outputTypes: string[];
    _constant: boolean;
    _name: string;
    _payable: boolean;
    needsToBeTransaction: boolean;
    constructor(requestManager: RequestManager, json: any, address: string);
    extractDefaultBlock(args: any[]): any;
    /**
     * Should be called to check if the number of arguments is correct
     *
     * @method validateArgs
     * @param {Array} arguments
     * @throws {Error} if it is not
     */
    validateArgs(args: any[]): void;
    /**
     * Should be used to create payload from arguments
     *
     * @method toPayload
     * @param {Array} solidity function params
     * @param {object} optional payload options
     */
    toPayload(args: any[]): {
        to: any;
        data: any;
        value: any;
        from: any;
    };
    /**
     * Should be used to get function signature
     *
     * @method signature
     * @return {string} function signature
     */
    signature(): string;
    unpackOutput(output: string): any;
    /**
     * Calls a contract function or to sendTransaction to solidity function
     *
     * @method call
     * @param {...Object} Contract function arguments
     * @return {string} output bytes
     */
    execute(requestManager: RequestManager, ...args: any[]): Promise<any>;
    /**
     * Should be used to estimateGas of solidity function
     *
     * @method estimateGas
     */
    estimateGas(...args: any[]): Promise<number>;
    /**
     * Return the encoded data of the call
     *
     * @method getData
     * @return {string} the encoded data
     */
    getData(...args: any[]): any;
    /**
     * Should be used to get function display name
     *
     * @method displayName
     * @return {string} display name of the function
     */
    displayName(): string;
    /**
     * Should be used to get function type name
     *
     * @method typeName
     * @return {string} type name of the function
     */
    typeName(): string;
    /**
     * Should be called to attach function to contract
     *
     * @method attachToContract
     * @param {Contract}
     */
    attachToContract(contract: any): void;
}
